import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, Output, ViewContainerRef, ViewChild, Pipe, ViewEncapsulation, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i1 from '@angular/platform-browser';

class AngularTreeGridService {
    constructor() {
        this.display_data_observable = new Subject();
        this.display_data_observable$ = this.display_data_observable.asObservable();
    }
    updateDisplayDataObservable(display_data) {
        this.display_data_observable.next(display_data);
    }
    findRowIndex(display_data, configs, row_id) {
        return display_data.map(row => row[configs.id_field]).
            indexOf(row_id);
    }
    selectAll(display_data) {
        display_data.forEach(data => {
            data.row_selected = true;
        });
    }
    deSelectAll(display_data) {
        display_data.forEach(data => {
            data.row_selected = false;
        });
    }
    expandAll(expand_tracker) {
        for (const key in expand_tracker) {
            if (expand_tracker.hasOwnProperty(key)) {
                expand_tracker[key] = true;
            }
        }
    }
    collapseAll(expand_tracker) {
        for (const key in expand_tracker) {
            if (expand_tracker.hasOwnProperty(key)) {
                expand_tracker[key] = false;
            }
        }
        expand_tracker[''] = true;
    }
    expandRow(row_id, expand_tracker, expand_event, suppress_event, configs, display_data, store) {
        if (configs.subgrid) {
            this.expandSubgridRow(row_id, expand_tracker, expand_event, suppress_event, configs, display_data, store);
            return;
        }
        const row_index = this.findRowIndex(display_data, configs, row_id);
        const row_data = display_data[row_index];
        const pathx = row_data.pathx;
        const parts = pathx.split('.');
        expand_tracker[row_data.pathx] = true;
        let expanded_count = 1;
        for (let index = 0; index < display_data.length; index++) {
            const record = display_data[index];
            // Stop when all rows are expanded.
            if (expanded_count >= parts.length) {
                return;
            }
            // Join paths as we expand.
            const key = parts.slice(0, expanded_count).join('.');
            // We don't want to expand it's children here.
            if (record.pathx.indexOf(key) !== -1) {
                expanded_count += 1;
                expand_tracker[record.pathx] = true;
                if (!suppress_event) {
                    if (configs.load_children_on_expand) {
                        this.emitExpandRowEvent(expand_tracker, expand_event, store, row_data, configs);
                    }
                    else {
                        expand_event.emit({ event: null, data: row_data });
                    }
                }
            }
        }
    }
    collapseRow(row_id, expand_tracker, collapse_event, suppress_event, configs, display_data) {
        const row_index = this.findRowIndex(display_data, configs, row_id);
        const row_data = display_data[row_index];
        const pathx = row_data.pathx;
        expand_tracker[pathx] = false;
        // Collapse children rows as well
        display_data.forEach(record => {
            if (record.pathx.indexOf(pathx) !== -1) {
                expand_tracker[record.pathx] = 0;
                if (!suppress_event) {
                    collapse_event.emit({ event: null, data: row_data });
                }
            }
        });
    }
    emitExpandRowEvent(expand_tracker, expand, store, row_data, configs) {
        const promise = new Promise((resolve, reject) => {
            expand.emit({
                data: row_data,
                resolve: resolve
            });
        });
        expand_tracker[row_data.pathx] = true;
        store.remove_children(row_data);
        row_data.is_loading = true;
        // Add Child rows to the table.
        promise.then((child_rows) => {
            row_data.is_loading = false;
            store.remove_children(row_data);
            if (child_rows) {
                child_rows.map(child => {
                    child.leaf = true;
                    child.levelx = row_data.levelx + 1;
                    child.pathx = row_data.pathx + '.' + child[configs.id_field];
                    child.parent_pathx = row_data.pathx;
                    child[configs.parent_id_field] = row_data[configs.id_field];
                });
                store.add_children(row_data, child_rows);
            }
        }).catch((err) => { });
    }
    disableRowSelection(display_data, configs, row_id) {
        const row_index = this.findRowIndex(display_data, configs, row_id);
        display_data[row_index].selection_disabled = true;
    }
    enableRowSelection(display_data, configs, row_id) {
        const row_index = this.findRowIndex(display_data, configs, row_id);
        display_data[row_index].selection_disabled = false;
    }
    disableRowExpand(display_data, configs, row_id) {
        const row_index = this.findRowIndex(display_data, configs, row_id);
        display_data[row_index].expand_disabled = true;
    }
    enableRowExpand(display_data, configs, row_id) {
        const row_index = this.findRowIndex(display_data, configs, row_id);
        display_data[row_index].expand_disabled = false;
    }
    expandSubgridRow(row_id, expand_tracker, expand_event, suppress_event, configs, display_data, store) {
        const row_index = this.findRowIndex(display_data, configs, row_id);
        const row_data = display_data[row_index];
        expand_tracker[row_data.pathx] = true;
        if (!suppress_event) {
            this.emitSubgridExpandRowEvent(expand_tracker, expand_event, store, row_data);
        }
    }
    emitSubgridExpandRowEvent(expand_tracker, expand, store, row_data) {
        const promise = new Promise((resolve, reject) => {
            expand.emit({
                data: row_data,
                resolve: resolve
            });
        });
        expand_tracker[row_data.pathx] = true;
        const blank_row = store.showBlankRow(row_data);
        blank_row.loading_children = true;
        // Add Child rows to the table.
        promise.then((child_rows) => {
            blank_row.loading_children = false;
            if (child_rows) {
                child_rows.map(child => {
                    child.leaf = true;
                });
                blank_row.children = child_rows;
            }
            else {
                // Persist old children. If didn't exist then assign blank array.
                if (!blank_row.children) {
                    blank_row.children = [];
                }
            }
        }).catch((err) => { });
    }
}
AngularTreeGridService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AngularTreeGridService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class Store {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
    }
    getRawData() {
        return this.raw_data;
    }
    setRawData(raw_data) {
        this.raw_data = raw_data;
    }
    getProcessedData() {
        return this.processed_data;
    }
    setProcessedData(processed_data) {
        this.processed_data = processed_data;
        this.setDisplayData([...processed_data]);
    }
    getDisplayData() {
        return this.display_data;
    }
    setDisplayData(display_data) {
        this.display_data = display_data;
        this.angularTreeGridService.updateDisplayDataObservable(this.display_data);
    }
    /**
     * Show Blank row for subgrid.
     *
     * @param  row_data Row Data
     * @returns blank_row
     */
    showBlankRow(row_data) {
        const row_index = this.display_data.map(row => row[this.configs.id_field]).
            indexOf(row_data[this.configs.id_field]);
        let blank_row = this.display_data[row_index + 1];
        if (!blank_row || blank_row.parent_pathx !== row_data[this.configs.id_field]) {
            blank_row = {
                leaf: true,
                row_selected: true,
                parent_pathx: row_data[this.configs.id_field]
            };
            blank_row[this.configs.id_field] = -1;
            this.display_data.splice(row_index + 1, 0, blank_row);
        }
        return blank_row;
    }
    remove_children(row_data) {
        const new_processed_data = [];
        for (let index = 0; index < this.processed_data.length; index++) {
            const element = this.processed_data[index];
            if (element[this.configs.parent_id_field] !== row_data[this.configs.id_field]) {
                new_processed_data.push(element);
            }
        }
        this.setProcessedData(new_processed_data);
    }
    add_children(row_data, children) {
        const row_index = this.processed_data.map(row => row[this.configs.id_field]).
            indexOf(row_data[this.configs.id_field]);
        const top_rows = this.processed_data.slice(0, row_index + 1);
        const bottom_rows = this.processed_data.slice(row_index + 1);
        this.processed_data = top_rows.concat(children).concat(bottom_rows);
        this.setDisplayData([...this.processed_data]);
        this.angularTreeGridService.updateDisplayDataObservable(this.display_data);
    }
    filterBy(columns, search_values) {
        this.display_data = this.processed_data.filter((record) => {
            let found = true;
            for (let index = 0; index < columns.length; index++) {
                const column = columns[index];
                let column_value = record[column.name];
                let search_value = search_values[index];
                // If blank then continue.
                if (!search_value) {
                    continue;
                }
                // Call custom filter function.
                if (column.filter_function) {
                    const response = column.filter_function(record, column, column_value, search_value);
                    if (response === false) {
                        found = false;
                    }
                }
                else {
                    if (typeof (column_value) === 'number') {
                        if (column_value !== parseInt(search_value, 10)) {
                            found = false;
                        }
                    }
                    else {
                        if (!column.case_sensitive_filter) {
                            column_value = column_value.toLowerCase();
                            search_value = search_value.toLowerCase();
                        }
                        if (column_value.indexOf(search_value) === -1) {
                            found = false;
                        }
                    }
                }
            }
            return found;
        });
        this.angularTreeGridService.updateDisplayDataObservable(this.display_data);
    }
    findTopParentNode(data, configs) {
        const ids = data.map(element => element[configs.id_field]);
        let top_parents = [];
        // Find parents ie if parent_id is not present in ids.
        data.forEach(element => {
            if (ids.indexOf(element[configs.parent_id_field]) === -1) {
                top_parents.push(element[configs.parent_id_field]);
            }
        });
        // Remove duplicates
        top_parents = top_parents.filter(function (item, pos, self) {
            return self.indexOf(item) === pos;
        });
        return top_parents;
    }
    processData(data, expand_tracker, configs, edit_tracker, internal_configs) {
        const top_parents = this.findTopParentNode(data, configs);
        const processed_data = [];
        internal_configs.top_parents = top_parents;
        data.map(rec => {
            rec.pathx = [];
            rec.leaf = false;
        });
        top_parents.forEach(top_parent => {
            const children = this.findChildren(data, top_parent, configs);
            this.orderData(data, processed_data, configs, children, [], 0);
        });
        processed_data.map(rec => {
            const parent_pathx = rec.parent_pathx;
            rec.parent_pathx = parent_pathx.join('.');
            parent_pathx.push(rec[configs.id_field]);
            // Add current id to create current path.
            rec.pathx = parent_pathx.join('.');
            edit_tracker[rec[configs.id_field]] = false;
            // For Subgrid feature, expect all rows are expandable.
            if (configs.subgrid) {
                rec.leaf = false;
            }
        });
        // Expand root.
        expand_tracker[''] = true;
        this.setProcessedData(processed_data);
        this.setRawData(data);
        this.configs = configs;
    }
    findChildren(data, id, configs) {
        return data.filter(rec => rec[configs.parent_id_field] === id);
    }
    orderData(data, processed_data, configs, parents, paths, levelx) {
        parents.forEach(parent => {
            const children = this.findChildren(data, parent[configs.id_field], configs);
            if (children.length === 0) {
                parent.leaf = true;
                parent.levelx = levelx;
                parent.parent_pathx = [...paths];
                processed_data.push(parent);
            }
            else {
                parent.parent_pathx = [...paths];
                parent.levelx = levelx;
                processed_data.push(parent);
                const newPaths = [...paths, parent[configs.id_field]];
                this.orderData(data, processed_data, configs, children, newPaths, levelx + 1);
            }
        });
    }
    refreshDisplayData() {
        this.display_data = this.processed_data;
        this.angularTreeGridService.updateDisplayDataObservable(this.display_data);
    }
}

class TreeHeadComponent {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
    }
    ngOnInit() { }
    addRow() {
        this.internal_configs.show_add_row = true;
    }
    selectAll(e) {
        if (e.target.checked) {
            this.angularTreeGridService.selectAll(this.store.getDisplayData());
            this.rowselectall.emit(this.store.getDisplayData());
        }
        else {
            this.angularTreeGridService.deSelectAll(this.store.getDisplayData());
            this.rowdeselectall.emit(e);
        }
    }
}
TreeHeadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeHeadComponent, deps: [{ token: AngularTreeGridService }], target: i0.ɵɵFactoryTarget.Component });
TreeHeadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeHeadComponent, selector: "[db-tree-head]", inputs: { store: "store", configs: "configs", expand_tracker: "expand_tracker", edit_tracker: "edit_tracker", internal_configs: "internal_configs", columns: "columns", rowselectall: "rowselectall", rowdeselectall: "rowdeselectall" }, ngImport: i0, template: "<ng-container *ngIf=\"configs\">\n  <tr [ngClass]=\"configs.css.header_class\">\n    <th *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input\n        type=\"checkbox\"\n        (click)=\"selectAll($event)\"\n        [checked]=\"this.internal_configs.all_selected\"\n      />\n    </th>\n    <th\n      *ngIf=\"\n        configs.actions.add || configs.actions.edit || configs.actions.delete\n      \"\n      class=\"action-column\"\n      width=\"{{ configs.action_column_width }}\"\n      (click)=\"addRow()\"\n    >\n      <span class=\"icon-container\">\n        <span\n          *ngIf=\"\n            !internal_configs.show_add_row &&\n            configs.actions.add &&\n            configs.css.add_icon.length > 0\n          \"\n          [innerHTML]=\"configs.css.add_icon | safeHtml\"\n          title=\"Add a row\"\n        ></span>\n        <span\n          *ngIf=\"\n            !internal_configs.show_add_row &&\n            configs.actions.add &&\n            configs.css.add_icon.length == 0\n          \"\n          title=\"Add a row\"\n          class=\"inbuild-icon\"\n          >+</span\n        >\n      </span>\n      <span *ngIf=\"internal_configs.show_add_row || !configs.actions.add\"\n        >Actions</span\n      >\n    </th>\n    <th\n      *ngFor=\"let column of columns\"\n      [ngClass]=\"{ 'column-hide': column.hidden }\"\n      [attr.width]=\"column.width\"\n    >\n      <div\n        [innerHTML]=\"\n          column.header_renderer\n            ? column.header_renderer(column.header)\n            : column.header\n        \"\n      ></div>\n    </th>\n    <th\n      *ngIf=\"\n        (configs.show_parent_on_edit && internal_configs.show_parent_col) ||\n        internal_configs.show_add_row\n      \"\n    >\n      Parent\n    </th>\n  </tr>\n</ng-container>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc;background:#fff}tr th{font-size:1rem;font-weight:600;line-height:1.25;color:#181818;vertical-align:middle;position:relative;box-sizing:border-box}tr th div{padding:.5rem}tr th.column-hide{display:none}tr th.action-column span.icon-container{cursor:pointer}tr th span.inbuild-icon{font-size:25px}th.clear-left-border{border-left:0!important}th.clear-right-border{border-right:0!important}.column-hide{display:none}svg{width:25px;padding-right:3px}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeHeadComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-tree-head]', template: "<ng-container *ngIf=\"configs\">\n  <tr [ngClass]=\"configs.css.header_class\">\n    <th *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input\n        type=\"checkbox\"\n        (click)=\"selectAll($event)\"\n        [checked]=\"this.internal_configs.all_selected\"\n      />\n    </th>\n    <th\n      *ngIf=\"\n        configs.actions.add || configs.actions.edit || configs.actions.delete\n      \"\n      class=\"action-column\"\n      width=\"{{ configs.action_column_width }}\"\n      (click)=\"addRow()\"\n    >\n      <span class=\"icon-container\">\n        <span\n          *ngIf=\"\n            !internal_configs.show_add_row &&\n            configs.actions.add &&\n            configs.css.add_icon.length > 0\n          \"\n          [innerHTML]=\"configs.css.add_icon | safeHtml\"\n          title=\"Add a row\"\n        ></span>\n        <span\n          *ngIf=\"\n            !internal_configs.show_add_row &&\n            configs.actions.add &&\n            configs.css.add_icon.length == 0\n          \"\n          title=\"Add a row\"\n          class=\"inbuild-icon\"\n          >+</span\n        >\n      </span>\n      <span *ngIf=\"internal_configs.show_add_row || !configs.actions.add\"\n        >Actions</span\n      >\n    </th>\n    <th\n      *ngFor=\"let column of columns\"\n      [ngClass]=\"{ 'column-hide': column.hidden }\"\n      [attr.width]=\"column.width\"\n    >\n      <div\n        [innerHTML]=\"\n          column.header_renderer\n            ? column.header_renderer(column.header)\n            : column.header\n        \"\n      ></div>\n    </th>\n    <th\n      *ngIf=\"\n        (configs.show_parent_on_edit && internal_configs.show_parent_col) ||\n        internal_configs.show_add_row\n      \"\n    >\n      Parent\n    </th>\n  </tr>\n</ng-container>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc;background:#fff}tr th{font-size:1rem;font-weight:600;line-height:1.25;color:#181818;vertical-align:middle;position:relative;box-sizing:border-box}tr th div{padding:.5rem}tr th.column-hide{display:none}tr th.action-column span.icon-container{cursor:pointer}tr th span.inbuild-icon{font-size:25px}th.clear-left-border{border-left:0!important}th.clear-right-border{border-right:0!important}.column-hide{display:none}svg{width:25px;padding-right:3px}\n"] }]
        }], ctorParameters: function () { return [{ type: AngularTreeGridService }]; }, propDecorators: { store: [{
                type: Input
            }], configs: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], edit_tracker: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }], columns: [{
                type: Input
            }], rowselectall: [{
                type: Input
            }], rowdeselectall: [{
                type: Input
            }] } });

class FilterRowComponent {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
        this.search_values = {};
    }
    ngOnInit() {
        this.columns.forEach(column => {
            this.search_values[column.name] = '';
        });
    }
    filter() {
        this.store.filterBy(this.columns, Object.values(this.search_values));
        // Don't expand for subgrid.
        if (!this.configs.subgrid) {
            this.angularTreeGridService.expandAll(this.expand_tracker);
        }
    }
}
FilterRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: FilterRowComponent, deps: [{ token: AngularTreeGridService }], target: i0.ɵɵFactoryTarget.Component });
FilterRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: FilterRowComponent, selector: "[db-filter-row]", inputs: { store: "store", columns: "columns", expand_tracker: "expand_tracker", configs: "configs", internal_configs: "internal_configs" }, ngImport: i0, template: "<td *ngIf=\"configs.multi_select\"></td>\n<td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n<td *ngFor=\"let column of columns\">\n  <div *ngIf=\"column.filter\">\n    <input type=\"text\" (keyup)=\"filter()\" [(ngModel)]=\"search_values[column.name]\">\n  </div>\n</td>\n<!-- Add column to fix UI issue when add row is enabled or Edit is enabled -->\n<td *ngIf=\"internal_configs.show_add_row || (internal_configs.show_parent_col && configs.show_parent_on_edit)\"></td>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}td{vertical-align:middle;position:relative;padding:.2rem}td input{padding:5px;box-sizing:border-box;width:100%;border:1px solid #d1cece}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: FilterRowComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-filter-row]', template: "<td *ngIf=\"configs.multi_select\"></td>\n<td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n<td *ngFor=\"let column of columns\">\n  <div *ngIf=\"column.filter\">\n    <input type=\"text\" (keyup)=\"filter()\" [(ngModel)]=\"search_values[column.name]\">\n  </div>\n</td>\n<!-- Add column to fix UI issue when add row is enabled or Edit is enabled -->\n<td *ngIf=\"internal_configs.show_add_row || (internal_configs.show_parent_col && configs.show_parent_on_edit)\"></td>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}td{vertical-align:middle;position:relative;padding:.2rem}td input{padding:5px;box-sizing:border-box;width:100%;border:1px solid #d1cece}\n"] }]
        }], ctorParameters: function () { return [{ type: AngularTreeGridService }]; }, propDecorators: { store: [{
                type: Input
            }], columns: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], configs: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }] } });

class DefaultEditor {
    constructor() {
        this.canceledit = new EventEmitter();
        this.editcomplete = new EventEmitter();
        this.cellclick = new EventEmitter();
    }
}
DefaultEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: DefaultEditor, deps: [], target: i0.ɵɵFactoryTarget.Component });
DefaultEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: DefaultEditor, selector: "ng-component", outputs: { canceledit: "canceledit", editcomplete: "editcomplete", cellclick: "cellclick" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: DefaultEditor, decorators: [{
            type: Component,
            args: [{
                    selector: '',
                    template: '',
                }]
        }], propDecorators: { canceledit: [{
                type: Output
            }], editcomplete: [{
                type: Output
            }], cellclick: [{
                type: Output
            }] } });

class CustomCellEditorComponent extends DefaultEditor {
    constructor(resolver) {
        super();
        this.resolver = resolver;
    }
    ngOnInit() {
        if (this.column.editor && !this.custom_component) {
            this.createCustomComponent();
            this.callOnComponentInit();
        }
    }
    ngOnDestroy() {
        if (this.custom_component) {
            this.custom_component.destroy();
        }
    }
    createCustomComponent() {
        const componentFactory = this.resolver.resolveComponentFactory(this.column.editor);
        this.custom_component = this.custom_view.createComponent(componentFactory);
    }
    callOnComponentInit() {
        this.column.on_component_init && this.column.on_component_init(this.custom_component.instance);
        this.custom_component.instance.cell_value = this.cell_value;
        this.custom_component.instance.row_data = this.row_data;
        this.custom_component.instance.column = this.column;
        this.custom_component.instance.editcomplete.subscribe((event) => this.editcomplete.emit(event));
        this.custom_component.instance.canceledit.subscribe((event) => this.canceledit.emit(event));
        this.custom_component.instance.cellclick.subscribe((event) => this.cellclick.emit(event));
    }
}
CustomCellEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CustomCellEditorComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
CustomCellEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: CustomCellEditorComponent, selector: "db-custom-cell-editor-component", inputs: { column: "column", cell_value: "cell_value", row_data: "row_data" }, viewQueries: [{ propertyName: "custom_view", first: true, predicate: ["customView"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: `
      <ng-template #customView></ng-template>
    `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CustomCellEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'db-custom-cell-editor-component',
                    template: `
      <ng-template #customView></ng-template>
    `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { column: [{
                type: Input
            }], cell_value: [{
                type: Input
            }], row_data: [{
                type: Input
            }], custom_view: [{
                type: ViewChild,
                args: ['customView', { read: ViewContainerRef, static: true }]
            }] } });

class TreeCellEditorComponent extends DefaultEditor {
    constructor() {
        super();
    }
    ngOnInit() {
    }
}
TreeCellEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TreeCellEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeCellEditorComponent, selector: "db-tree-cell-editor", inputs: { cell_value: "cell_value", row_data: "row_data", column: "column", expandable_column: "expandable_column" }, usesInheritance: true, ngImport: i0, template: "<input type=\"text\" \n    [(ngModel)]=\"row_data[column.name]\" \n    [ngClass]=\"{'cell-default': true, 'expandable-editor': expandable_column}\"\n    (click)=\"cellclick.emit($event)\"\n    (keydown.enter)=\"editcomplete.emit($event)\"\n    (keydown.esc)=\"canceledit.emit()\"\n    size=\"1\"\n    >", styles: ["input.cell-default{padding:5px;box-sizing:border-box;width:100%;border:1px solid #d1cece}input.expandable-editor{width:calc(100% - 18px)}\n"], directives: [{ type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'db-tree-cell-editor', template: "<input type=\"text\" \n    [(ngModel)]=\"row_data[column.name]\" \n    [ngClass]=\"{'cell-default': true, 'expandable-editor': expandable_column}\"\n    (click)=\"cellclick.emit($event)\"\n    (keydown.enter)=\"editcomplete.emit($event)\"\n    (keydown.esc)=\"canceledit.emit()\"\n    size=\"1\"\n    >", styles: ["input.cell-default{padding:5px;box-sizing:border-box;width:100%;border:1px solid #d1cece}input.expandable-editor{width:calc(100% - 18px)}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { cell_value: [{
                type: Input
            }], row_data: [{
                type: Input
            }], column: [{
                type: Input
            }], expandable_column: [{
                type: Input
            }] } });

class SafeHtmlPipe {
    constructor(sanitized) {
        this.sanitized = sanitized;
    }
    transform(value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    }
}
SafeHtmlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SafeHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });
SafeHtmlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SafeHtmlPipe, name: "safeHtml" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SafeHtmlPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'safeHtml' }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });

class AddRowComponent {
    constructor() {
        this.row_data = {};
        this.parents = [];
        this.rowadd = new EventEmitter();
        this.canceledit = new EventEmitter();
    }
    ngOnInit() {
        this.raw_data = this.store.getRawData();
        this.columns.forEach(column => {
            this.row_data[column.name] = '';
        });
        this.parents = this.raw_data.map(element => {
            return {
                'id': element[this.configs.id_field],
                'value': element[this.configs.parent_display_field]
            };
        });
    }
    saveAddRecord(e) {
        this.raw_data.push(this.row_data);
        this.rowadd.emit(this.row_data);
    }
    cancelAddEdit() {
        this.internal_configs.show_add_row = false;
    }
}
AddRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AddRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AddRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: AddRowComponent, selector: "[db-add-row]", inputs: { store: "store", columns: "columns", configs: "configs", internal_configs: "internal_configs" }, outputs: { rowadd: "rowadd", canceledit: "canceledit" }, ngImport: i0, template: "<td *ngIf=\"configs.multi_select\"></td>\n<td>\n  <div class=\"icon-container\">\n    <span\n      (click)=\"saveAddRecord($event)\"\n      *ngIf=\"configs.css.save_icon\"\n      title=\"Save row\"\n      [innerHTML]=\"this.configs.css.save_icon | safeHtml\"\n    ></span>\n    <svg\n      (click)=\"saveAddRecord($event)\"\n      title=\"Save row\"\n      *ngIf=\"!configs.css.save_icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <title>Save row</title>\n      <g data-name=\"Layer 2\">\n        <g data-name=\"save\">\n          <rect width=\"24\" height=\"24\" opacity=\"0\" />\n          <path\n            d=\"M20.12 8.71l-4.83-4.83A3 3 0 0 0 13.17 3H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-7.17a3 3 0 0 0-.88-2.12zM10 19v-2h4v2zm9-1a1 1 0 0 1-1 1h-2v-3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2v5a1 1 0 0 0 1 1h4a1 1 0 0 0 0-2h-3V5h3.17a1.05 1.05 0 0 1 .71.29l4.83 4.83a1 1 0 0 1 .29.71z\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n  <div class=\"icon-container\">\n    <span\n      (click)=\"cancelAddEdit()\"\n      *ngIf=\"configs.css.cancel_icon\"\n      title=\"Cancel row\"\n      [innerHTML]=\"this.configs.css.cancel_icon | safeHtml\"\n    ></span>\n    <svg\n      (click)=\"cancelAddEdit()\"\n      *ngIf=\"!configs.css.cancel_icon\"\n      title=\"Cancel row\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <title>Cancel row</title>\n      <g data-name=\"Layer 2\">\n        <g data-name=\"close\">\n          <rect\n            width=\"24\"\n            height=\"24\"\n            transform=\"rotate(180 12 12)\"\n            opacity=\"0\"\n          />\n          <path\n            d=\"M13.41 12l4.3-4.29a1 1 0 1 0-1.42-1.42L12 10.59l-4.29-4.3a1 1 0 0 0-1.42 1.42l4.3 4.29-4.3 4.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l4.29-4.3 4.29 4.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n</td>\n<td *ngFor=\"let column of columns\" [ngClass]=\"{ 'column-hide': column.hidden }\">\n  <div *ngIf=\"column.editable\">\n    <db-custom-cell-editor-component\n      *ngIf=\"column.editor\"\n      [cell_value]=\"\"\n      [column]=\"column\"\n      [row_data]=\"row_data\"\n      (canceledit)=\"cancelAddEdit()\"\n      (editcomplete)=\"saveAddRecord($event)\"\n    >\n    </db-custom-cell-editor-component>\n    <db-tree-cell-editor\n      *ngIf=\"!column.editor\"\n      [cell_value]=\"\"\n      [row_data]=\"row_data\"\n      [column]=\"column\"\n      (canceledit)=\"cancelAddEdit()\"\n      (editcomplete)=\"saveAddRecord($event)\"\n    >\n    </db-tree-cell-editor>\n  </div>\n</td>\n<td>\n  <select [(ngModel)]=\"row_data[configs.parent_id_field]\">\n    <option *ngFor=\"let parent of parents\" [value]=\"parent.id\">\n      {{ parent.value }}\n    </option>\n  </select>\n</td>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}svg{width:20px;padding-right:4px}div.icon-container{display:inline-block;width:50%;text-align:center}\n"], components: [{ type: CustomCellEditorComponent, selector: "db-custom-cell-editor-component", inputs: ["column", "cell_value", "row_data"] }, { type: TreeCellEditorComponent, selector: "db-tree-cell-editor", inputs: ["cell_value", "row_data", "column", "expandable_column"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }], pipes: { "safeHtml": SafeHtmlPipe }, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AddRowComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-add-row]', encapsulation: ViewEncapsulation.None, template: "<td *ngIf=\"configs.multi_select\"></td>\n<td>\n  <div class=\"icon-container\">\n    <span\n      (click)=\"saveAddRecord($event)\"\n      *ngIf=\"configs.css.save_icon\"\n      title=\"Save row\"\n      [innerHTML]=\"this.configs.css.save_icon | safeHtml\"\n    ></span>\n    <svg\n      (click)=\"saveAddRecord($event)\"\n      title=\"Save row\"\n      *ngIf=\"!configs.css.save_icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <title>Save row</title>\n      <g data-name=\"Layer 2\">\n        <g data-name=\"save\">\n          <rect width=\"24\" height=\"24\" opacity=\"0\" />\n          <path\n            d=\"M20.12 8.71l-4.83-4.83A3 3 0 0 0 13.17 3H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-7.17a3 3 0 0 0-.88-2.12zM10 19v-2h4v2zm9-1a1 1 0 0 1-1 1h-2v-3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2v5a1 1 0 0 0 1 1h4a1 1 0 0 0 0-2h-3V5h3.17a1.05 1.05 0 0 1 .71.29l4.83 4.83a1 1 0 0 1 .29.71z\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n  <div class=\"icon-container\">\n    <span\n      (click)=\"cancelAddEdit()\"\n      *ngIf=\"configs.css.cancel_icon\"\n      title=\"Cancel row\"\n      [innerHTML]=\"this.configs.css.cancel_icon | safeHtml\"\n    ></span>\n    <svg\n      (click)=\"cancelAddEdit()\"\n      *ngIf=\"!configs.css.cancel_icon\"\n      title=\"Cancel row\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <title>Cancel row</title>\n      <g data-name=\"Layer 2\">\n        <g data-name=\"close\">\n          <rect\n            width=\"24\"\n            height=\"24\"\n            transform=\"rotate(180 12 12)\"\n            opacity=\"0\"\n          />\n          <path\n            d=\"M13.41 12l4.3-4.29a1 1 0 1 0-1.42-1.42L12 10.59l-4.29-4.3a1 1 0 0 0-1.42 1.42l4.3 4.29-4.3 4.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l4.29-4.3 4.29 4.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n</td>\n<td *ngFor=\"let column of columns\" [ngClass]=\"{ 'column-hide': column.hidden }\">\n  <div *ngIf=\"column.editable\">\n    <db-custom-cell-editor-component\n      *ngIf=\"column.editor\"\n      [cell_value]=\"\"\n      [column]=\"column\"\n      [row_data]=\"row_data\"\n      (canceledit)=\"cancelAddEdit()\"\n      (editcomplete)=\"saveAddRecord($event)\"\n    >\n    </db-custom-cell-editor-component>\n    <db-tree-cell-editor\n      *ngIf=\"!column.editor\"\n      [cell_value]=\"\"\n      [row_data]=\"row_data\"\n      [column]=\"column\"\n      (canceledit)=\"cancelAddEdit()\"\n      (editcomplete)=\"saveAddRecord($event)\"\n    >\n    </db-tree-cell-editor>\n  </div>\n</td>\n<td>\n  <select [(ngModel)]=\"row_data[configs.parent_id_field]\">\n    <option *ngFor=\"let parent of parents\" [value]=\"parent.id\">\n      {{ parent.value }}\n    </option>\n  </select>\n</td>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}svg{width:20px;padding-right:4px}div.icon-container{display:inline-block;width:50%;text-align:center}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { store: [{
                type: Input
            }], columns: [{
                type: Input
            }], configs: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }], rowadd: [{
                type: Output
            }], canceledit: [{
                type: Output
            }] } });

class TreeCellActionsComponent {
    constructor() {
        this.editcomplete = new EventEmitter();
        this.canceledit = new EventEmitter();
    }
    ngOnInit() {
        this.display_data = this.store.getDisplayData();
    }
    enableEdit(index, row_data) {
        //Cancel all previous edits.
        for (const id in this.edit_tracker) {
            this.edit_tracker[id] = false;
        }
        this.edit_tracker[index] = true;
        // Only if edit_parent is true.
        if (this.configs.actions.edit_parent) {
            this.internal_configs.show_parent_col = true;
        }
        this.internal_configs.current_edited_row = { ...row_data };
    }
    findRecordIndex(pathx) {
        for (const index in this.store.processed_data) {
            if (this.store.processed_data[index].pathx === pathx) {
                return Number(index);
            }
        }
    }
    deleteRecord(rec) {
        const index = this.findRecordIndex(rec.pathx);
        if (this.configs.actions.resolve_delete) {
            const promise = new Promise((resolve, reject) => {
                this.rowdelete.emit({
                    data: rec,
                    resolve: resolve
                });
            });
            promise.then(() => {
                this.store.processed_data.splice(index, 1);
                this.store.refreshDisplayData();
            }).catch((err) => { });
        }
        else {
            this.store.processed_data.splice(index, 1);
            this.store.refreshDisplayData();
            this.rowdelete.emit(rec);
        }
    }
    saveRecord($event) {
        this.editcomplete.emit({ event: $event, data: this.row_data });
    }
}
TreeCellActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TreeCellActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeCellActionsComponent, selector: "[db-tree-cell-actions]", inputs: { store: "store", edit_tracker: "edit_tracker", internal_configs: "internal_configs", configs: "configs", rowdelete: "rowdelete", row_data: "row_data" }, outputs: { editcomplete: "editcomplete", canceledit: "canceledit" }, ngImport: i0, template: "<ng-container\n  *ngIf=\"configs.actions.edit && configs.row_edit_function(row_data)\"\n>\n  <div *ngIf=\"!edit_tracker[row_data[configs.id_field]]\" class=\"icon-container\">\n    <span\n      (click)=\"enableEdit(row_data[configs.id_field], row_data)\"\n      *ngIf=\"configs.css.edit_icon\"\n      title=\"Edit row\"\n      [innerHTML]=\"this.configs.css.edit_icon | safeHtml\"\n    ></span>\n    <svg\n      (click)=\"enableEdit(row_data[configs.id_field], row_data)\"\n      *ngIf=\"!configs.css.edit_icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <title>Edit row</title>\n      <g data-name=\"Layer 2\">\n        <g data-name=\"edit\">\n          <rect width=\"24\" height=\"24\" opacity=\"0\" />\n          <path\n            d=\"M19.4 7.34L16.66 4.6A2 2 0 0 0 14 4.53l-9 9a2 2 0 0 0-.57 1.21L4 18.91a1 1 0 0 0 .29.8A1 1 0 0 0 5 20h.09l4.17-.38a2 2 0 0 0 1.21-.57l9-9a1.92 1.92 0 0 0-.07-2.71zM9.08 17.62l-3 .28.27-3L12 9.32l2.7 2.7zM16 10.68L13.32 8l1.95-2L18 8.73z\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n  <ng-container *ngIf=\"edit_tracker[row_data[configs.id_field]]\">\n    <div class=\"icon-container\">\n      <span\n        (click)=\"saveRecord($event)\"\n        *ngIf=\"configs.css.save_icon\"\n        title=\"Save row\"\n        [innerHTML]=\"this.configs.css.save_icon | safeHtml\"\n      ></span>\n      <svg\n        (click)=\"saveRecord($event)\"\n        title=\"Save row\"\n        *ngIf=\"!configs.css.save_icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n      >\n        <title>Save row</title>\n        <g data-name=\"Layer 2\">\n          <g data-name=\"save\">\n            <rect width=\"24\" height=\"24\" opacity=\"0\" />\n            <path\n              d=\"M20.12 8.71l-4.83-4.83A3 3 0 0 0 13.17 3H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-7.17a3 3 0 0 0-.88-2.12zM10 19v-2h4v2zm9-1a1 1 0 0 1-1 1h-2v-3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2v5a1 1 0 0 0 1 1h4a1 1 0 0 0 0-2h-3V5h3.17a1.05 1.05 0 0 1 .71.29l4.83 4.83a1 1 0 0 1 .29.71z\"\n            />\n          </g>\n        </g>\n      </svg>\n    </div>\n    <div class=\"icon-container\">\n      <span\n        (click)=\"canceledit.emit(row_data)\"\n        *ngIf=\"configs.css.cancel_icon\"\n        title=\"Cancel row\"\n        [innerHTML]=\"this.configs.css.cancel_icon | safeHtml\"\n      ></span>\n      <svg\n        (click)=\"canceledit.emit(row_data)\"\n        *ngIf=\"!configs.css.cancel_icon\"\n        title=\"Cancel row\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n      >\n        <title>Cancel row</title>\n        <g data-name=\"Layer 2\">\n          <g data-name=\"close\">\n            <rect\n              width=\"24\"\n              height=\"24\"\n              transform=\"rotate(180 12 12)\"\n              opacity=\"0\"\n            />\n            <path\n              d=\"M13.41 12l4.3-4.29a1 1 0 1 0-1.42-1.42L12 10.59l-4.29-4.3a1 1 0 0 0-1.42 1.42l4.3 4.29-4.3 4.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l4.29-4.3 4.29 4.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z\"\n            />\n          </g>\n        </g>\n      </svg>\n    </div>\n  </ng-container>\n</ng-container>\n<div\n  class=\"icon-container\"\n  *ngIf=\"\n    configs.actions.delete &&\n    !edit_tracker[row_data[configs.id_field]] &&\n    configs.row_delete_function(row_data)\n  \"\n>\n  <span\n    *ngIf=\"configs.css.delete_icon\"\n    title=\"Delete row\"\n    (click)=\"deleteRecord(row_data)\"\n    [innerHTML]=\"this.configs.css.delete_icon | safeHtml\"\n  ></span>\n  <svg\n    *ngIf=\"!configs.css.delete_icon\"\n    title=\"Delete row\"\n    (click)=\"deleteRecord(row_data)\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n  >\n    <title>Delete row</title>\n    <g data-name=\"Layer 2\">\n      <g data-name=\"trash-2\">\n        <rect width=\"24\" height=\"24\" opacity=\"0\" />\n        <path\n          d=\"M21 6h-5V4.33A2.42 2.42 0 0 0 13.5 2h-3A2.42 2.42 0 0 0 8 4.33V6H3a1 1 0 0 0 0 2h1v11a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V8h1a1 1 0 0 0 0-2zM10 4.33c0-.16.21-.33.5-.33h3c.29 0 .5.17.5.33V6h-4zM18 19a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8h12z\"\n        />\n        <path d=\"M9 17a1 1 0 0 0 1-1v-4a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1z\" />\n        <path d=\"M15 17a1 1 0 0 0 1-1v-4a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1z\" />\n      </g>\n    </g>\n  </svg>\n</div>\n", styles: ["svg{width:20px}div.icon-container{display:inline-block;width:50%;text-align:center;color:#000;cursor:pointer}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "safeHtml": SafeHtmlPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-tree-cell-actions]', template: "<ng-container\n  *ngIf=\"configs.actions.edit && configs.row_edit_function(row_data)\"\n>\n  <div *ngIf=\"!edit_tracker[row_data[configs.id_field]]\" class=\"icon-container\">\n    <span\n      (click)=\"enableEdit(row_data[configs.id_field], row_data)\"\n      *ngIf=\"configs.css.edit_icon\"\n      title=\"Edit row\"\n      [innerHTML]=\"this.configs.css.edit_icon | safeHtml\"\n    ></span>\n    <svg\n      (click)=\"enableEdit(row_data[configs.id_field], row_data)\"\n      *ngIf=\"!configs.css.edit_icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <title>Edit row</title>\n      <g data-name=\"Layer 2\">\n        <g data-name=\"edit\">\n          <rect width=\"24\" height=\"24\" opacity=\"0\" />\n          <path\n            d=\"M19.4 7.34L16.66 4.6A2 2 0 0 0 14 4.53l-9 9a2 2 0 0 0-.57 1.21L4 18.91a1 1 0 0 0 .29.8A1 1 0 0 0 5 20h.09l4.17-.38a2 2 0 0 0 1.21-.57l9-9a1.92 1.92 0 0 0-.07-2.71zM9.08 17.62l-3 .28.27-3L12 9.32l2.7 2.7zM16 10.68L13.32 8l1.95-2L18 8.73z\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n  <ng-container *ngIf=\"edit_tracker[row_data[configs.id_field]]\">\n    <div class=\"icon-container\">\n      <span\n        (click)=\"saveRecord($event)\"\n        *ngIf=\"configs.css.save_icon\"\n        title=\"Save row\"\n        [innerHTML]=\"this.configs.css.save_icon | safeHtml\"\n      ></span>\n      <svg\n        (click)=\"saveRecord($event)\"\n        title=\"Save row\"\n        *ngIf=\"!configs.css.save_icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n      >\n        <title>Save row</title>\n        <g data-name=\"Layer 2\">\n          <g data-name=\"save\">\n            <rect width=\"24\" height=\"24\" opacity=\"0\" />\n            <path\n              d=\"M20.12 8.71l-4.83-4.83A3 3 0 0 0 13.17 3H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-7.17a3 3 0 0 0-.88-2.12zM10 19v-2h4v2zm9-1a1 1 0 0 1-1 1h-2v-3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2v5a1 1 0 0 0 1 1h4a1 1 0 0 0 0-2h-3V5h3.17a1.05 1.05 0 0 1 .71.29l4.83 4.83a1 1 0 0 1 .29.71z\"\n            />\n          </g>\n        </g>\n      </svg>\n    </div>\n    <div class=\"icon-container\">\n      <span\n        (click)=\"canceledit.emit(row_data)\"\n        *ngIf=\"configs.css.cancel_icon\"\n        title=\"Cancel row\"\n        [innerHTML]=\"this.configs.css.cancel_icon | safeHtml\"\n      ></span>\n      <svg\n        (click)=\"canceledit.emit(row_data)\"\n        *ngIf=\"!configs.css.cancel_icon\"\n        title=\"Cancel row\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n      >\n        <title>Cancel row</title>\n        <g data-name=\"Layer 2\">\n          <g data-name=\"close\">\n            <rect\n              width=\"24\"\n              height=\"24\"\n              transform=\"rotate(180 12 12)\"\n              opacity=\"0\"\n            />\n            <path\n              d=\"M13.41 12l4.3-4.29a1 1 0 1 0-1.42-1.42L12 10.59l-4.29-4.3a1 1 0 0 0-1.42 1.42l4.3 4.29-4.3 4.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l4.29-4.3 4.29 4.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z\"\n            />\n          </g>\n        </g>\n      </svg>\n    </div>\n  </ng-container>\n</ng-container>\n<div\n  class=\"icon-container\"\n  *ngIf=\"\n    configs.actions.delete &&\n    !edit_tracker[row_data[configs.id_field]] &&\n    configs.row_delete_function(row_data)\n  \"\n>\n  <span\n    *ngIf=\"configs.css.delete_icon\"\n    title=\"Delete row\"\n    (click)=\"deleteRecord(row_data)\"\n    [innerHTML]=\"this.configs.css.delete_icon | safeHtml\"\n  ></span>\n  <svg\n    *ngIf=\"!configs.css.delete_icon\"\n    title=\"Delete row\"\n    (click)=\"deleteRecord(row_data)\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n  >\n    <title>Delete row</title>\n    <g data-name=\"Layer 2\">\n      <g data-name=\"trash-2\">\n        <rect width=\"24\" height=\"24\" opacity=\"0\" />\n        <path\n          d=\"M21 6h-5V4.33A2.42 2.42 0 0 0 13.5 2h-3A2.42 2.42 0 0 0 8 4.33V6H3a1 1 0 0 0 0 2h1v11a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V8h1a1 1 0 0 0 0-2zM10 4.33c0-.16.21-.33.5-.33h3c.29 0 .5.17.5.33V6h-4zM18 19a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8h12z\"\n        />\n        <path d=\"M9 17a1 1 0 0 0 1-1v-4a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1z\" />\n        <path d=\"M15 17a1 1 0 0 0 1-1v-4a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1z\" />\n      </g>\n    </g>\n  </svg>\n</div>\n", styles: ["svg{width:20px}div.icon-container{display:inline-block;width:50%;text-align:center;color:#000;cursor:pointer}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { store: [{
                type: Input
            }], edit_tracker: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }], configs: [{
                type: Input
            }], rowdelete: [{
                type: Input
            }], row_data: [{
                type: Input
            }], editcomplete: [{
                type: Output
            }], canceledit: [{
                type: Output
            }] } });

class CustomCellViewComponent {
    constructor(resolver) {
        this.resolver = resolver;
    }
    ngOnInit() {
        if (this.column.component && !this.custom_component) {
            this.createCustomComponent();
            this.callOnComponentInit();
        }
    }
    ngOnDestroy() {
        if (this.custom_component) {
            this.custom_component.destroy();
        }
    }
    createCustomComponent() {
        const componentFactory = this.resolver.resolveComponentFactory(this.column.component);
        this.custom_component = this.custom_view.createComponent(componentFactory);
    }
    callOnComponentInit() {
        this.column.on_component_init && this.column.on_component_init(this.custom_component.instance);
        this.custom_component.instance.cell_value = this.row_data[this.column.name];
        this.custom_component.instance.row_data = this.row_data;
        this.custom_component.instance.column = this.column;
    }
}
CustomCellViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CustomCellViewComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
CustomCellViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: CustomCellViewComponent, selector: "db-custom-cell-component", inputs: { column: "column", row_data: "row_data" }, viewQueries: [{ propertyName: "custom_view", first: true, predicate: ["customView"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `
      <ng-template #customView></ng-template>
    `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CustomCellViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'db-custom-cell-component',
                    template: `
      <ng-template #customView></ng-template>
    `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { column: [{
                type: Input
            }], row_data: [{
                type: Input
            }], custom_view: [{
                type: ViewChild,
                args: ['customView', { read: ViewContainerRef, static: true }]
            }] } });

class TreeCellViewComponent {
    constructor() { }
    ngOnInit() {
    }
}
TreeCellViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TreeCellViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeCellViewComponent, selector: "db-tree-cell-view", inputs: { column: "column", row_data: "row_data" }, ngImport: i0, template: "<span [innerHTML]=\"column.renderer ? column.renderer(row_data[column.name], row_data) : row_data[column.name]\"></span>\n", styles: [""] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'db-tree-cell-view', template: "<span [innerHTML]=\"column.renderer ? column.renderer(row_data[column.name], row_data) : row_data[column.name]\"></span>\n", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { column: [{
                type: Input
            }], row_data: [{
                type: Input
            }] } });

class TreeCellComponent {
    constructor() {
        this.rowexpand = new EventEmitter();
        this.rowcollapse = new EventEmitter();
        this.canceledit = new EventEmitter();
        this.editcomplete = new EventEmitter();
    }
    ngOnInit() {
        this.is_expand_column = this.index === 0;
        this.show_expand_icon = !this.row_data.leaf;
        // If user mentions a node as leaf.
        if (this.configs.load_children_on_expand) {
            this.show_expand_icon = !this.row_data.leaf_node;
        }
        this.cell_value = this.row_data[this.column.name];
    }
    expandRow(event) {
        if (this.index === 0 && (!this.row_data.leaf || this.configs.load_children_on_expand)) {
            this.rowexpand.emit({ event: event, data: this.row_data });
            event.stopPropagation();
        }
    }
    collapseRow(event) {
        if (this.index === 0 && (!this.row_data.leaf || this.configs.load_children_on_expand)) {
            this.rowcollapse.emit({ event: event, data: this.row_data });
            event.stopPropagation();
        }
    }
    onCellClick(event) {
        this.cellclick.emit({ column: this.column, row: this.row_data, event: event });
    }
    onEditComplete($event) {
        this.editcomplete.emit({ event: $event, data: this.row_data });
    }
}
TreeCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TreeCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeCellComponent, selector: "db-tree-cell", inputs: { configs: "configs", index: "index", row_data: "row_data", column: "column", expand_tracker: "expand_tracker", cellclick: "cellclick", edit_on: "edit_on" }, outputs: { rowexpand: "rowexpand", rowcollapse: "rowcollapse", canceledit: "canceledit", editcomplete: "editcomplete" }, ngImport: i0, template: "<div (click)=\"onCellClick($event)\">\n  <ng-container *ngIf=\"is_expand_column\">\n    <div\n      [ngStyle]=\"{\n        'padding-left': row_data.leaf\n          ? row_data.levelx * 20 + 'px'\n          : row_data.levelx * 10 + 'px'\n      }\"\n    >\n      <span\n        class=\"no-expand-icon\"\n        *ngIf=\"row_data.levelx == 0 && row_data.leaf\"\n      ></span>\n      <ng-container *ngIf=\"!expand_tracker[row_data.pathx]\">\n        <span (click)=\"expandRow($event)\" class=\"expand-icon-container\">\n          <span\n            class=\"expand-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.expand_icon.length > 0\"\n            [innerHTML]=\"configs.css.expand_icon | safeHtml\"\n          ></span>\n          <span\n            class=\"expand-icon inbuild-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.expand_icon.length == 0\"\n            >+</span\n          >\n        </span>\n      </ng-container>\n      <ng-container *ngIf=\"expand_tracker[row_data.pathx]\">\n        <span *ngIf=\"row_data.is_loading\" class=\"childred-loader\"></span>\n        <span (click)=\"collapseRow($event)\" *ngIf=\"!row_data.is_loading\" class=\"expand-icon-container\">\n          <span\n            class=\"expand-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.collapse_icon.length > 0\"\n            [innerHTML]=\"configs.css.collapse_icon | safeHtml\"\n          ></span>\n          <span\n            class=\"expand-icon inbuild-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.collapse_icon.length == 0\"\n            >-</span\n          >\n        </span>\n      </ng-container>\n      <ng-container\n        *ngIf=\"!edit_on || !column.editable\"\n        [ngSwitch]=\"column.type\"\n      >\n        <db-custom-cell-component\n          *ngSwitchCase=\"'custom'\"\n          [column]=\"column\"\n          [row_data]=\"row_data\"\n        >\n        </db-custom-cell-component>\n        <db-tree-cell-view\n          *ngSwitchDefault\n          [column]=\"column\"\n          [row_data]=\"row_data\"\n        >\n        </db-tree-cell-view>\n      </ng-container>\n      <ng-container *ngIf=\"edit_on && column.editable\">\n        <db-custom-cell-editor-component\n          *ngIf=\"column.editor\"\n          [cell_value]=\"cell_value\"\n          [column]=\"column\"\n          [row_data]=\"row_data\"\n          (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n          (editcomplete)=\"onEditComplete($event)\"\n        >\n        </db-custom-cell-editor-component>\n        <db-tree-cell-editor\n          *ngIf=\"!column.editor\"\n          [cell_value]=\"cell_value\"\n          [row_data]=\"row_data\"\n          [column]=\"column\"\n          [expandable_column]=\"true\"\n          (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n          (editcomplete)=\"onEditComplete($event)\"\n        >\n        </db-tree-cell-editor>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"!is_expand_column\">\n    <ng-container *ngIf=\"!edit_on || !column.editable\" [ngSwitch]=\"column.type\">\n      <db-custom-cell-component\n        *ngSwitchCase=\"'custom'\"\n        [column]=\"column\"\n        [row_data]=\"row_data\"\n      >\n      </db-custom-cell-component>\n      <db-tree-cell-view\n        *ngSwitchDefault\n        [column]=\"column\"\n        [row_data]=\"row_data\"\n      >\n      </db-tree-cell-view>\n    </ng-container>\n\n    <ng-container *ngIf=\"edit_on && column.editable\">\n      <db-custom-cell-editor-component\n        *ngIf=\"column.editor\"\n        [cell_value]=\"cell_value\"\n        [column]=\"column\"\n        [row_data]=\"row_data\"\n        (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n        (editcomplete)=\"onEditComplete($event)\"\n      >\n      </db-custom-cell-editor-component>\n      <db-tree-cell-editor\n        *ngIf=\"!column.editor\"\n        [cell_value]=\"cell_value\"\n        [row_data]=\"row_data\"\n        [column]=\"column\"\n        [expandable_column]=\"false\"\n        (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n        (editcomplete)=\"onEditComplete($event)\"\n      >\n      </db-tree-cell-editor>\n    </ng-container>\n  </ng-container>\n</div>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}i.expand-icon{margin-right:5px}span.no-expand-icon{display:inline-block;width:14px}span.expand-icon-container{position:relative;cursor:pointer;margin:0 5px 0 0}span.expand-icon-container span.inbuild-icon{font-size:25px}span.childred-loader{border:3px solid #f3f3f3;animation:spin 1s linear infinite;border-top:3px solid #555;border-radius:50%;width:10px;height:10px;display:inline-block;margin-right:5px}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"], components: [{ type: CustomCellViewComponent, selector: "db-custom-cell-component", inputs: ["column", "row_data"] }, { type: TreeCellViewComponent, selector: "db-tree-cell-view", inputs: ["column", "row_data"] }, { type: CustomCellEditorComponent, selector: "db-custom-cell-editor-component", inputs: ["column", "cell_value", "row_data"] }, { type: TreeCellEditorComponent, selector: "db-tree-cell-editor", inputs: ["cell_value", "row_data", "column", "expandable_column"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "safeHtml": SafeHtmlPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'db-tree-cell', template: "<div (click)=\"onCellClick($event)\">\n  <ng-container *ngIf=\"is_expand_column\">\n    <div\n      [ngStyle]=\"{\n        'padding-left': row_data.leaf\n          ? row_data.levelx * 20 + 'px'\n          : row_data.levelx * 10 + 'px'\n      }\"\n    >\n      <span\n        class=\"no-expand-icon\"\n        *ngIf=\"row_data.levelx == 0 && row_data.leaf\"\n      ></span>\n      <ng-container *ngIf=\"!expand_tracker[row_data.pathx]\">\n        <span (click)=\"expandRow($event)\" class=\"expand-icon-container\">\n          <span\n            class=\"expand-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.expand_icon.length > 0\"\n            [innerHTML]=\"configs.css.expand_icon | safeHtml\"\n          ></span>\n          <span\n            class=\"expand-icon inbuild-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.expand_icon.length == 0\"\n            >+</span\n          >\n        </span>\n      </ng-container>\n      <ng-container *ngIf=\"expand_tracker[row_data.pathx]\">\n        <span *ngIf=\"row_data.is_loading\" class=\"childred-loader\"></span>\n        <span (click)=\"collapseRow($event)\" *ngIf=\"!row_data.is_loading\" class=\"expand-icon-container\">\n          <span\n            class=\"expand-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.collapse_icon.length > 0\"\n            [innerHTML]=\"configs.css.collapse_icon | safeHtml\"\n          ></span>\n          <span\n            class=\"expand-icon inbuild-icon\"\n            [ngStyle]=\"{\n              visibility: row_data.expand_disabled ? 'hidden' : 'visible'\n            }\"\n            *ngIf=\"show_expand_icon && configs.css.collapse_icon.length == 0\"\n            >-</span\n          >\n        </span>\n      </ng-container>\n      <ng-container\n        *ngIf=\"!edit_on || !column.editable\"\n        [ngSwitch]=\"column.type\"\n      >\n        <db-custom-cell-component\n          *ngSwitchCase=\"'custom'\"\n          [column]=\"column\"\n          [row_data]=\"row_data\"\n        >\n        </db-custom-cell-component>\n        <db-tree-cell-view\n          *ngSwitchDefault\n          [column]=\"column\"\n          [row_data]=\"row_data\"\n        >\n        </db-tree-cell-view>\n      </ng-container>\n      <ng-container *ngIf=\"edit_on && column.editable\">\n        <db-custom-cell-editor-component\n          *ngIf=\"column.editor\"\n          [cell_value]=\"cell_value\"\n          [column]=\"column\"\n          [row_data]=\"row_data\"\n          (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n          (editcomplete)=\"onEditComplete($event)\"\n        >\n        </db-custom-cell-editor-component>\n        <db-tree-cell-editor\n          *ngIf=\"!column.editor\"\n          [cell_value]=\"cell_value\"\n          [row_data]=\"row_data\"\n          [column]=\"column\"\n          [expandable_column]=\"true\"\n          (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n          (editcomplete)=\"onEditComplete($event)\"\n        >\n        </db-tree-cell-editor>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"!is_expand_column\">\n    <ng-container *ngIf=\"!edit_on || !column.editable\" [ngSwitch]=\"column.type\">\n      <db-custom-cell-component\n        *ngSwitchCase=\"'custom'\"\n        [column]=\"column\"\n        [row_data]=\"row_data\"\n      >\n      </db-custom-cell-component>\n      <db-tree-cell-view\n        *ngSwitchDefault\n        [column]=\"column\"\n        [row_data]=\"row_data\"\n      >\n      </db-tree-cell-view>\n    </ng-container>\n\n    <ng-container *ngIf=\"edit_on && column.editable\">\n      <db-custom-cell-editor-component\n        *ngIf=\"column.editor\"\n        [cell_value]=\"cell_value\"\n        [column]=\"column\"\n        [row_data]=\"row_data\"\n        (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n        (editcomplete)=\"onEditComplete($event)\"\n      >\n      </db-custom-cell-editor-component>\n      <db-tree-cell-editor\n        *ngIf=\"!column.editor\"\n        [cell_value]=\"cell_value\"\n        [row_data]=\"row_data\"\n        [column]=\"column\"\n        [expandable_column]=\"false\"\n        (canceledit)=\"canceledit.emit(row_data['pathx'])\"\n        (editcomplete)=\"onEditComplete($event)\"\n      >\n      </db-tree-cell-editor>\n    </ng-container>\n  </ng-container>\n</div>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}i.expand-icon{margin-right:5px}span.no-expand-icon{display:inline-block;width:14px}span.expand-icon-container{position:relative;cursor:pointer;margin:0 5px 0 0}span.expand-icon-container span.inbuild-icon{font-size:25px}span.childred-loader{border:3px solid #f3f3f3;animation:spin 1s linear infinite;border-top:3px solid #555;border-radius:50%;width:10px;height:10px;display:inline-block;margin-right:5px}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { configs: [{
                type: Input
            }], index: [{
                type: Input
            }], row_data: [{
                type: Input
            }], column: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], cellclick: [{
                type: Input
            }], edit_on: [{
                type: Input
            }], rowexpand: [{
                type: Output
            }], rowcollapse: [{
                type: Output
            }], canceledit: [{
                type: Output
            }], editcomplete: [{
                type: Output
            }] } });

class SubgridHeadComponent {
    constructor() { }
    ngOnInit() {
    }
    sortColumn(row_data, column) {
        const sort_by = column.name;
        // If already sorted then reverse.
        column.sort_type = column.sorted ? !column.sort_type : 1;
        column.sorted = 1;
        column.sort_type ? row_data.children.sort((a, b) => (a[sort_by] > b[sort_by]) ? 1 : ((b[sort_by] > a[sort_by]) ? -1 : 0)) :
            row_data.children.sort((a, b) => (a[sort_by] < b[sort_by]) ? 1 : ((b[sort_by] < a[sort_by]) ? -1 : 0));
    }
}
SubgridHeadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridHeadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SubgridHeadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: SubgridHeadComponent, selector: "[db-subgrid-head]", inputs: { configs: "configs", row_data: "row_data" }, ngImport: i0, template: "<tr>\n  <th *ngFor=\"let column of configs.subgrid_config.columns\"\n    (click)=\"sortColumn(row_data, column)\" width=\"{{column.width ? column.width : 'auto'}}\"\n    [ngClass]=\"{'sorted': column.sorted,'sortable': column.sortable, 'column-hide': column.hidden}\">\n    {{column.header}}\n    <span *ngIf=\"column.sortable\" [ngClass]=\"column.sorted && column.sort_type == 0?'arrow-down active':'arrow-down'\"></span>\n    <span *ngIf=\"column.sortable\" [ngClass]=\"column.sorted && column.sort_type == 1?'arrow-up active':'arrow-up'\"></span>\n  </th>\n</tr>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc;background:#fff}tr th{font-size:1rem;font-weight:600;line-height:1.25;color:#181818;vertical-align:middle;position:relative;box-sizing:border-box}tr th div{padding:.5rem}tr th.column-hide{display:none}tr th.action-column span.icon-container{cursor:pointer}tr th span.inbuild-icon{font-size:25px}th.clear-left-border{border-left:0!important}th.clear-right-border{border-right:0!important}.column-hide{display:none}svg{width:25px;padding-right:3px}th.sortable{cursor:pointer}th.sortable:hover span.arrow-up{border-bottom:6px solid #afafaf}th.sortable:hover span.arrow-down{border-top:6px solid #afafaf}th span.arrow-up{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-bottom:6px solid #ddd;position:relative;top:-18px}th span.arrow-up.active{border-bottom:6px solid #8a8989!important}th span.arrow-down{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:6px solid #ddd;position:relative;left:10px;top:17px}th span.arrow-down.active{border-top:6px solid #8a8989!important}\n"], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridHeadComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-subgrid-head]', template: "<tr>\n  <th *ngFor=\"let column of configs.subgrid_config.columns\"\n    (click)=\"sortColumn(row_data, column)\" width=\"{{column.width ? column.width : 'auto'}}\"\n    [ngClass]=\"{'sorted': column.sorted,'sortable': column.sortable, 'column-hide': column.hidden}\">\n    {{column.header}}\n    <span *ngIf=\"column.sortable\" [ngClass]=\"column.sorted && column.sort_type == 0?'arrow-down active':'arrow-down'\"></span>\n    <span *ngIf=\"column.sortable\" [ngClass]=\"column.sorted && column.sort_type == 1?'arrow-up active':'arrow-up'\"></span>\n  </th>\n</tr>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc;background:#fff}tr th{font-size:1rem;font-weight:600;line-height:1.25;color:#181818;vertical-align:middle;position:relative;box-sizing:border-box}tr th div{padding:.5rem}tr th.column-hide{display:none}tr th.action-column span.icon-container{cursor:pointer}tr th span.inbuild-icon{font-size:25px}th.clear-left-border{border-left:0!important}th.clear-right-border{border-right:0!important}.column-hide{display:none}svg{width:25px;padding-right:3px}th.sortable{cursor:pointer}th.sortable:hover span.arrow-up{border-bottom:6px solid #afafaf}th.sortable:hover span.arrow-down{border-top:6px solid #afafaf}th span.arrow-up{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-bottom:6px solid #ddd;position:relative;top:-18px}th span.arrow-up.active{border-bottom:6px solid #8a8989!important}th span.arrow-down{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:6px solid #ddd;position:relative;left:10px;top:17px}th span.arrow-down.active{border-top:6px solid #8a8989!important}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { configs: [{
                type: Input
            }], row_data: [{
                type: Input
            }] } });

class SubgridBodyComponent {
    constructor() { }
    ngOnInit() {
    }
}
SubgridBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridBodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SubgridBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: SubgridBodyComponent, selector: "[db-subgrid-body]", inputs: { configs: "configs", expand_tracker: "expand_tracker", row_data: "row_data", cellclick: "cellclick" }, ngImport: i0, template: "<ng-container *ngIf=\"row_data.loading_children\">\n  <tr>\n    <td [attr.colspan]=\"configs.subgrid_config.columns.length\" \n      [innerHTML]=\"configs.subgrid_config.data_loading_text\"\n      class=\"subgrid-loading-text\"></td>\n  </tr>\n</ng-container>\n<ng-container *ngIf=\"!row_data.loading_children\">\n  <tr *ngFor=\"let child_data of row_data.children\">\n    <td *ngFor=\"let column of configs.subgrid_config.columns; index as i\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"1\"\n        [row_data]=\"child_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [cellclick]=\"cellclick\"\n      ></db-tree-cell>\n    </td>\n  </tr>\n  <tr *ngIf=\"configs.subgrid_config.show_summary_row\">\n    <td *ngFor=\"let column of configs.subgrid_config.columns\">\n      <div [innerHTML]=\"column.summary_renderer && column.summary_renderer(row_data.children)\"></div>\n    </td>\n  </tr>\n</ng-container>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}td.subgrid-loading-text{text-align:center}\n"], components: [{ type: TreeCellComponent, selector: "db-tree-cell", inputs: ["configs", "index", "row_data", "column", "expand_tracker", "cellclick", "edit_on"], outputs: ["rowexpand", "rowcollapse", "canceledit", "editcomplete"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-subgrid-body]', template: "<ng-container *ngIf=\"row_data.loading_children\">\n  <tr>\n    <td [attr.colspan]=\"configs.subgrid_config.columns.length\" \n      [innerHTML]=\"configs.subgrid_config.data_loading_text\"\n      class=\"subgrid-loading-text\"></td>\n  </tr>\n</ng-container>\n<ng-container *ngIf=\"!row_data.loading_children\">\n  <tr *ngFor=\"let child_data of row_data.children\">\n    <td *ngFor=\"let column of configs.subgrid_config.columns; index as i\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"1\"\n        [row_data]=\"child_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [cellclick]=\"cellclick\"\n      ></db-tree-cell>\n    </td>\n  </tr>\n  <tr *ngIf=\"configs.subgrid_config.show_summary_row\">\n    <td *ngFor=\"let column of configs.subgrid_config.columns\">\n      <div [innerHTML]=\"column.summary_renderer && column.summary_renderer(row_data.children)\"></div>\n    </td>\n  </tr>\n</ng-container>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}td.subgrid-loading-text{text-align:center}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { configs: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], row_data: [{
                type: Input
            }], cellclick: [{
                type: Input
            }] } });

class SubgridComponent {
    constructor() { }
    ngOnInit() { }
    saveRecord($event) {
        const element = $event.data;
        if (this.configs.actions.resolve_edit) {
            const promise = new Promise((resolve, reject) => {
                this.rowsave.emit({
                    data: element,
                    resolve: resolve
                });
            });
            promise.then(() => {
                this.checkAndRefreshData(element);
            }).catch((err) => { });
        }
        else {
            this.checkAndRefreshData(element);
            this.rowsave.emit(element);
        }
    }
    checkAndRefreshData(element) {
        this.edit_tracker[element[this.configs.id_field]] = false;
        this.internal_configs.show_parent_col = false;
        // Only refresh if Parent has been changed.
        if (this.internal_configs.current_edited_row[this.configs.parent_id_field]
            !== element[this.configs.parent_id_field]) {
            this.refreshData(element);
        }
    }
    refreshData(element) {
        // If edit parent is not true then don't refresh.
        if (!this.configs.actions.edit_parent) {
            return;
        }
        element[this.configs.parent_id_field] = parseInt(element[this.configs.parent_id_field], 10);
        this.expand_tracker = {};
        this.edit_tracker = {};
        this.store.processData(this.store.getRawData(), this.expand_tracker, this.configs, this.edit_tracker, this.internal_configs);
    }
    cancelEdit(row_data) {
        const index = row_data[this.configs.id_field];
        // Cancel all changes ie copy from back up.
        Object.assign(row_data, this.internal_configs.current_edited_row);
        this.edit_tracker[index] = false;
        this.internal_configs.show_parent_col = false;
    }
    onRowExpand(event) {
        const row_data = event.data;
        const promise = new Promise((resolve, reject) => {
            this.expand.emit({
                data: row_data,
                resolve: resolve
            });
        });
        this.expand_tracker[row_data.pathx] = true;
        const blank_row = this.store.showBlankRow(row_data);
        blank_row.loading_children = true;
        // Add Child rows to the table.
        promise.then((child_rows) => {
            blank_row.loading_children = false;
            if (child_rows) {
                child_rows.map(child => {
                    child.leaf = true;
                });
                blank_row.children = child_rows;
            }
            else {
                // Persist old children. If didn't exist then assign blank array.
                if (!blank_row.children) {
                    blank_row.children = [];
                }
            }
        }).catch((err) => { });
    }
    onRowCollapse(event) {
        const row_data = event.data;
        this.expand_tracker[row_data.pathx] = false;
    }
    selectRowOnCheck(row_data, event) {
        if (event.target.checked) {
            row_data.row_selected = true;
            this.rowselect.emit({ data: row_data, event: event });
        }
        else {
            row_data.row_selected = false;
            this.rowdeselect.emit({ data: row_data, event: event });
        }
        this.setSelectAllConfig();
    }
    /**
     * Set Select All config on Select change.
     *
     */
    setSelectAllConfig() {
        let select_all = true;
        this.store.getDisplayData().forEach(data => {
            if (!data.row_selected) {
                select_all = false;
            }
        });
        this.internal_configs.all_selected = select_all;
    }
}
SubgridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SubgridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: SubgridComponent, selector: "[db-subgrid]", inputs: { store: "store", configs: "configs", expand_tracker: "expand_tracker", edit_tracker: "edit_tracker", internal_configs: "internal_configs", row_data: "row_data", cellclick: "cellclick", expand: "expand", rowselect: "rowselect", rowdeselect: "rowdeselect", rowsave: "rowsave", rowdelete: "rowdelete" }, ngImport: i0, template: "<ng-container *ngIf=\"expand_tracker[row_data.parent_pathx]\">\n\n  <!-- Expandable Row -->\n  <ng-container *ngIf=\"!row_data.leaf\">\n    <td *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input type=\"checkbox\" [checked]=\"row_data.row_selected\" (click)=\"selectRowOnCheck(row_data, $event)\" \n        [attr.disabled]=\"row_data.selection_disabled\">\n    </td>\n    <td db-tree-cell-actions \n      *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"\n      [row_data]=\"row_data\"\n      [configs]=\"configs\"\n      [store]=\"store\"\n      [edit_tracker]=\"edit_tracker\"\n      [internal_configs]=\"internal_configs\"\n      [rowdelete]=\"rowdelete\"\n      (canceledit)=\"cancelEdit($event)\" \n      (editcomplete)=\"saveRecord($event)\"\n      >\n    </td>\n    <td *ngFor=\"let column of configs.columns; index as i\" \n      [ngClass]=\"{'column-hide': column.hidden, 'expand-column': i == 0}\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"i\"\n        [row_data]=\"row_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_on]=\"edit_tracker[row_data[configs.id_field]]\"\n        [cellclick]=\"cellclick\"\n        (rowexpand)=\"onRowExpand($event)\"\n        (rowcollapse)=\"onRowCollapse($event)\"\n        (editcomplete)=\"saveRecord($event)\"\n      >\n      </db-tree-cell>\n    </td>\n  </ng-container>\n\n  <!-- Subgrid Rows -->\n  <ng-container *ngIf=\"row_data.leaf\">    \n    <td *ngIf=\"configs.multi_select\"></td>\n    <td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n    <td [attr.colspan]=\"configs.columns.length\" class=\"subgrid-column\">\n        <table class=\"subgrid-table\">\n          <thead db-subgrid-head\n            [row_data]=\"row_data\"\n            [configs]=\"configs\">\n            \n          </thead>\n          <tbody db-subgrid-body\n            [configs]=\"configs\"\n            [expand_tracker]=\"expand_tracker\"\n            [cellclick]=\"cellclick\"\n            [row_data]=\"row_data\">\n          </tbody>            \n        </table>\n    </td>    \n  </ng-container>  \n</ng-container>", styles: ["tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}.db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc;background:#fff}tr th{font-size:1rem;font-weight:600;line-height:1.25;color:#181818;vertical-align:middle;position:relative;box-sizing:border-box}tr th div{padding:.5rem}tr th.column-hide{display:none}tr th.action-column span.icon-container{cursor:pointer}tr th span.inbuild-icon{font-size:25px}th.clear-left-border{border-left:0!important}th.clear-right-border{border-right:0!important}.column-hide{display:none}svg{width:25px;padding-right:3px}td{border:1px solid #cdd5dc;vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}td.checkbox_column{text-align:center}td.expand-column{padding:.3rem}td.subgrid-column{padding:0}td.column-hide{display:none}td.clear-left-border{border-left:0!important}td.clear-right-border{border-right:0!important}td table.subgrid-table{border-collapse:collapse;width:100%}\n"], components: [{ type: TreeCellActionsComponent, selector: "[db-tree-cell-actions]", inputs: ["store", "edit_tracker", "internal_configs", "configs", "rowdelete", "row_data"], outputs: ["editcomplete", "canceledit"] }, { type: TreeCellComponent, selector: "db-tree-cell", inputs: ["configs", "index", "row_data", "column", "expand_tracker", "cellclick", "edit_on"], outputs: ["rowexpand", "rowcollapse", "canceledit", "editcomplete"] }, { type: SubgridHeadComponent, selector: "[db-subgrid-head]", inputs: ["configs", "row_data"] }, { type: SubgridBodyComponent, selector: "[db-subgrid-body]", inputs: ["configs", "expand_tracker", "row_data", "cellclick"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-subgrid]', template: "<ng-container *ngIf=\"expand_tracker[row_data.parent_pathx]\">\n\n  <!-- Expandable Row -->\n  <ng-container *ngIf=\"!row_data.leaf\">\n    <td *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input type=\"checkbox\" [checked]=\"row_data.row_selected\" (click)=\"selectRowOnCheck(row_data, $event)\" \n        [attr.disabled]=\"row_data.selection_disabled\">\n    </td>\n    <td db-tree-cell-actions \n      *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"\n      [row_data]=\"row_data\"\n      [configs]=\"configs\"\n      [store]=\"store\"\n      [edit_tracker]=\"edit_tracker\"\n      [internal_configs]=\"internal_configs\"\n      [rowdelete]=\"rowdelete\"\n      (canceledit)=\"cancelEdit($event)\" \n      (editcomplete)=\"saveRecord($event)\"\n      >\n    </td>\n    <td *ngFor=\"let column of configs.columns; index as i\" \n      [ngClass]=\"{'column-hide': column.hidden, 'expand-column': i == 0}\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"i\"\n        [row_data]=\"row_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_on]=\"edit_tracker[row_data[configs.id_field]]\"\n        [cellclick]=\"cellclick\"\n        (rowexpand)=\"onRowExpand($event)\"\n        (rowcollapse)=\"onRowCollapse($event)\"\n        (editcomplete)=\"saveRecord($event)\"\n      >\n      </db-tree-cell>\n    </td>\n  </ng-container>\n\n  <!-- Subgrid Rows -->\n  <ng-container *ngIf=\"row_data.leaf\">    \n    <td *ngIf=\"configs.multi_select\"></td>\n    <td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n    <td [attr.colspan]=\"configs.columns.length\" class=\"subgrid-column\">\n        <table class=\"subgrid-table\">\n          <thead db-subgrid-head\n            [row_data]=\"row_data\"\n            [configs]=\"configs\">\n            \n          </thead>\n          <tbody db-subgrid-body\n            [configs]=\"configs\"\n            [expand_tracker]=\"expand_tracker\"\n            [cellclick]=\"cellclick\"\n            [row_data]=\"row_data\">\n          </tbody>            \n        </table>\n    </td>    \n  </ng-container>  \n</ng-container>", styles: ["tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}.db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc;background:#fff}tr th{font-size:1rem;font-weight:600;line-height:1.25;color:#181818;vertical-align:middle;position:relative;box-sizing:border-box}tr th div{padding:.5rem}tr th.column-hide{display:none}tr th.action-column span.icon-container{cursor:pointer}tr th span.inbuild-icon{font-size:25px}th.clear-left-border{border-left:0!important}th.clear-right-border{border-right:0!important}.column-hide{display:none}svg{width:25px;padding-right:3px}td{border:1px solid #cdd5dc;vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}td.checkbox_column{text-align:center}td.expand-column{padding:.3rem}td.subgrid-column{padding:0}td.column-hide{display:none}td.clear-left-border{border-left:0!important}td.clear-right-border{border-right:0!important}td table.subgrid-table{border-collapse:collapse;width:100%}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { store: [{
                type: Input
            }], configs: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], edit_tracker: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }], row_data: [{
                type: Input
            }], cellclick: [{
                type: Input
            }], expand: [{
                type: Input
            }], rowselect: [{
                type: Input
            }], rowdeselect: [{
                type: Input
            }], rowsave: [{
                type: Input
            }], rowdelete: [{
                type: Input
            }] } });

class TreeBodyComponent {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
        this.parents = [];
    }
    ngOnInit() {
        this.display_data = this.store.getDisplayData();
        this.angularTreeGridService.display_data_observable$.subscribe((store) => {
            this.display_data = this.store.getDisplayData();
            this.setParents();
        });
        this.setParents();
    }
    setParents() {
        this.parents = this.store.raw_data.map(element => {
            return {
                'id': element[this.configs.id_field],
                'value': element[this.configs.parent_display_field]
            };
        });
    }
    refreshData(element) {
        // If edit parent is not true then don't refresh.
        if (!this.configs.actions.edit_parent) {
            return;
        }
        element[this.configs.parent_id_field] = parseInt(element[this.configs.parent_id_field], 10);
        this.expand_tracker = {};
        this.edit_tracker = {};
        this.store.processData(this.store.getRawData(), this.expand_tracker, this.configs, this.edit_tracker, this.internal_configs);
    }
    onRowExpand(event) {
        const row_data = event.data;
        if (!this.configs.load_children_on_expand) {
            this.expand_tracker[row_data.pathx] = true;
            this.expand.emit(event);
        }
        else {
            this.angularTreeGridService.emitExpandRowEvent(this.expand_tracker, this.expand, this.store, row_data, this.configs);
        }
    }
    onRowCollapse(event) {
        const row_data = event.data;
        this.expand_tracker[row_data.pathx] = false;
        // Collapse all of its children.
        const keys = Object.keys(this.expand_tracker);
        keys.forEach(key => {
            if (key.indexOf(row_data.pathx) !== -1) {
                this.expand_tracker[key] = 0;
            }
        });
        this.collapse.emit(event);
    }
    saveRecord($event) {
        const element = $event.data;
        if (this.configs.actions.resolve_edit) {
            const promise = new Promise((resolve, reject) => {
                this.rowsave.emit({
                    data: element,
                    resolve: resolve
                });
            });
            promise.then(() => {
                this.checkAndRefreshData(element);
            }).catch((err) => { });
        }
        else {
            this.checkAndRefreshData(element);
            this.rowsave.emit(element);
        }
    }
    checkAndRefreshData(element) {
        this.edit_tracker[element[this.configs.id_field]] = false;
        this.internal_configs.show_parent_col = false;
        // Only refresh if Parent has been changed.
        if (this.internal_configs.current_edited_row[this.configs.parent_id_field]
            !== element[this.configs.parent_id_field]) {
            this.refreshData(element);
        }
    }
    addRow(element) {
        if (this.configs.actions.resolve_add) {
            const promise = new Promise((resolve, reject) => {
                this.rowadd.emit({
                    data: element,
                    resolve: resolve
                });
            });
            promise.then(() => {
                this.internal_configs.show_add_row = false;
                this.refreshData(element);
            }).catch((err) => { });
        }
        else {
            this.refreshData(element);
            this.internal_configs.show_add_row = false;
            this.rowadd.emit(element);
        }
    }
    cancelEdit(row_data) {
        const index = row_data[this.configs.id_field];
        // Cancel all changes ie copy from back up.
        Object.assign(row_data, this.internal_configs.current_edited_row);
        this.edit_tracker[index] = false;
        this.internal_configs.show_parent_col = false;
    }
    selectRow(row_data, event) {
        // Don't run if Multi select is enabled.
        if (this.configs.multi_select) {
            return;
        }
        this.store.getDisplayData().forEach(data => {
            data.row_selected = false;
        });
        row_data.row_selected = true;
        this.rowselect.emit({ data: row_data, event: event });
    }
    selectRowOnCheck(row_data, event) {
        if (event.target.checked) {
            row_data.row_selected = true;
            this.rowselect.emit({ data: row_data, event: event });
        }
        else {
            row_data.row_selected = false;
            this.rowdeselect.emit({ data: row_data, event: event });
        }
        this.setSelectAllConfig();
    }
    /**
     * Set Select All config on Select change.
     *
     */
    setSelectAllConfig() {
        let select_all = true;
        this.store.getDisplayData().forEach(data => {
            if (!data.row_selected) {
                select_all = false;
            }
        });
        this.internal_configs.all_selected = select_all;
    }
}
TreeBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyComponent, deps: [{ token: AngularTreeGridService }], target: i0.ɵɵFactoryTarget.Component });
TreeBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeBodyComponent, selector: "[db-tree-body]", inputs: { store: "store", configs: "configs", expand_tracker: "expand_tracker", edit_tracker: "edit_tracker", internal_configs: "internal_configs", columns: "columns", cellclick: "cellclick", expand: "expand", collapse: "collapse", rowdelete: "rowdelete", rowsave: "rowsave", rowadd: "rowadd", rowselect: "rowselect", rowdeselect: "rowdeselect" }, ngImport: i0, template: "<ng-container *ngIf=\"configs\">\n<tr *ngIf=\"store.raw_data.length==0\">\n  <td [innerHTML]=\"configs.data_loading_text\" [attr.colspan]=\"columns.length + 1\" style=\"text-align: center\"></td>\n</tr>\n<tr db-filter-row \n  [columns]=\"columns\" \n  [configs]=\"configs\"\n  [store]=\"store\"\n  [internal_configs]=\"internal_configs\" \n  *ngIf=\"configs.filter\"\n  [expand_tracker]=\"expand_tracker\"\n  [ngClass]=\"configs.css.row_filter_class\">\n</tr>\n<tr db-add-row \n  [columns]=\"columns\" \n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [store]=\"store\"\n  (rowadd)=\"addRow($event)\"\n  *ngIf=\"internal_configs.show_add_row\"\n  [ngClass]=\"configs.row_class_function()\">\n</tr>\n<ng-container *ngIf=\"configs.subgrid\">\n  <tr db-subgrid\n  *ngFor=\"let row_data of display_data\"\n  class=\"subgrid-row\"\n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [expand_tracker]=\"expand_tracker\" \n  [edit_tracker]=\"edit_tracker\" \n  [store]=\"store\"\n  [row_data]=\"row_data\"\n  [cellclick]=\"cellclick\"\n  [rowselect]=\"rowselect\"\n  [rowdeselect]=\"rowdeselect\"\n  [expand]=\"expand\"\n  [rowsave]=\"rowsave\"\n  [rowdelete]=\"rowdelete\"\n  >\n\n  </tr>\n</ng-container>\n<ng-container *ngIf=\"!configs.subgrid\">\n  <tr \n  *ngFor=\"let row_data of display_data\"\n  [attr.class]=\"configs.row_class_function(row_data) + ' ' + (row_data.row_selected ? configs.css.row_selection_class : '')\"\n  (click)=\"selectRow(row_data, $event)\" \n  >  \n  <ng-container *ngIf=\"expand_tracker[row_data.parent_pathx]\">\n    <td *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input type=\"checkbox\" [checked]=\"row_data.row_selected\" (click)=\"selectRowOnCheck(row_data, $event)\" \n        [attr.disabled]=\"row_data.selection_disabled\">\n    </td>\n    <td db-tree-cell-actions \n      *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"\n      [row_data]=\"row_data\"\n      [configs]=\"configs\"\n      [store]=\"store\"\n      [edit_tracker]=\"edit_tracker\"\n      [internal_configs]=\"internal_configs\"\n      [rowdelete]=\"rowdelete\"\n      (canceledit)=\"cancelEdit($event)\" \n      (editcomplete)=\"saveRecord($event)\">\n    </td>\n    <td *ngFor=\"let column of columns; index as i\" \n    class=\"{{column.css_class}}\"\n    [ngClass]=\"{'column-hide': column.hidden, 'expand-column': i == 0}\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"i\"\n        [row_data]=\"row_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_on]=\"edit_tracker[row_data[configs.id_field]]\"\n        [cellclick]=\"cellclick\"\n        (rowexpand)=\"onRowExpand($event)\"\n        (rowcollapse)=\"onRowCollapse($event)\"\n        (editcomplete)=\"saveRecord($event)\"\n      >\n      </db-tree-cell>\n    </td>\n    <td *ngIf=\"configs.show_parent_on_edit && internal_configs.show_parent_col\">\n      <select *ngIf=\"edit_tracker[row_data[configs.id_field]]\" \n        [(ngModel)]=\"row_data[configs.parent_id_field]\">\n        <option *ngFor=\"let parent of parents\" [value]=\"parent.id\">{{parent.value}}</option>\n      </select>\n    </td>    \n\n    <!-- Add column to fix UI issue when add row is enabled but don't show when edit is enabled for the row -->\n    <td *ngIf=\"internal_configs.show_add_row && !(internal_configs.show_parent_col && configs.show_parent_on_edit)\"></td>\n  </ng-container>\n</tr>\n<tr *ngIf=\"configs.show_summary_row\">\n  <td *ngIf=\"configs.multi_select\"></td>\n  <td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n  <td *ngFor=\"let column of configs.columns\">\n    <div [innerHTML]=\"column.summary_renderer && column.summary_renderer(display_data)\"></div>\n  </td>\n</tr>\n</ng-container>\n\n</ng-container>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}\n"], components: [{ type: FilterRowComponent, selector: "[db-filter-row]", inputs: ["store", "columns", "expand_tracker", "configs", "internal_configs"] }, { type: AddRowComponent, selector: "[db-add-row]", inputs: ["store", "columns", "configs", "internal_configs"], outputs: ["rowadd", "canceledit"] }, { type: SubgridComponent, selector: "[db-subgrid]", inputs: ["store", "configs", "expand_tracker", "edit_tracker", "internal_configs", "row_data", "cellclick", "expand", "rowselect", "rowdeselect", "rowsave", "rowdelete"] }, { type: TreeCellActionsComponent, selector: "[db-tree-cell-actions]", inputs: ["store", "edit_tracker", "internal_configs", "configs", "rowdelete", "row_data"], outputs: ["editcomplete", "canceledit"] }, { type: TreeCellComponent, selector: "db-tree-cell", inputs: ["configs", "index", "row_data", "column", "expand_tracker", "cellclick", "edit_on"], outputs: ["rowexpand", "rowcollapse", "canceledit", "editcomplete"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-tree-body]', template: "<ng-container *ngIf=\"configs\">\n<tr *ngIf=\"store.raw_data.length==0\">\n  <td [innerHTML]=\"configs.data_loading_text\" [attr.colspan]=\"columns.length + 1\" style=\"text-align: center\"></td>\n</tr>\n<tr db-filter-row \n  [columns]=\"columns\" \n  [configs]=\"configs\"\n  [store]=\"store\"\n  [internal_configs]=\"internal_configs\" \n  *ngIf=\"configs.filter\"\n  [expand_tracker]=\"expand_tracker\"\n  [ngClass]=\"configs.css.row_filter_class\">\n</tr>\n<tr db-add-row \n  [columns]=\"columns\" \n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [store]=\"store\"\n  (rowadd)=\"addRow($event)\"\n  *ngIf=\"internal_configs.show_add_row\"\n  [ngClass]=\"configs.row_class_function()\">\n</tr>\n<ng-container *ngIf=\"configs.subgrid\">\n  <tr db-subgrid\n  *ngFor=\"let row_data of display_data\"\n  class=\"subgrid-row\"\n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [expand_tracker]=\"expand_tracker\" \n  [edit_tracker]=\"edit_tracker\" \n  [store]=\"store\"\n  [row_data]=\"row_data\"\n  [cellclick]=\"cellclick\"\n  [rowselect]=\"rowselect\"\n  [rowdeselect]=\"rowdeselect\"\n  [expand]=\"expand\"\n  [rowsave]=\"rowsave\"\n  [rowdelete]=\"rowdelete\"\n  >\n\n  </tr>\n</ng-container>\n<ng-container *ngIf=\"!configs.subgrid\">\n  <tr \n  *ngFor=\"let row_data of display_data\"\n  [attr.class]=\"configs.row_class_function(row_data) + ' ' + (row_data.row_selected ? configs.css.row_selection_class : '')\"\n  (click)=\"selectRow(row_data, $event)\" \n  >  \n  <ng-container *ngIf=\"expand_tracker[row_data.parent_pathx]\">\n    <td *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input type=\"checkbox\" [checked]=\"row_data.row_selected\" (click)=\"selectRowOnCheck(row_data, $event)\" \n        [attr.disabled]=\"row_data.selection_disabled\">\n    </td>\n    <td db-tree-cell-actions \n      *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"\n      [row_data]=\"row_data\"\n      [configs]=\"configs\"\n      [store]=\"store\"\n      [edit_tracker]=\"edit_tracker\"\n      [internal_configs]=\"internal_configs\"\n      [rowdelete]=\"rowdelete\"\n      (canceledit)=\"cancelEdit($event)\" \n      (editcomplete)=\"saveRecord($event)\">\n    </td>\n    <td *ngFor=\"let column of columns; index as i\" \n    class=\"{{column.css_class}}\"\n    [ngClass]=\"{'column-hide': column.hidden, 'expand-column': i == 0}\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"i\"\n        [row_data]=\"row_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_on]=\"edit_tracker[row_data[configs.id_field]]\"\n        [cellclick]=\"cellclick\"\n        (rowexpand)=\"onRowExpand($event)\"\n        (rowcollapse)=\"onRowCollapse($event)\"\n        (editcomplete)=\"saveRecord($event)\"\n      >\n      </db-tree-cell>\n    </td>\n    <td *ngIf=\"configs.show_parent_on_edit && internal_configs.show_parent_col\">\n      <select *ngIf=\"edit_tracker[row_data[configs.id_field]]\" \n        [(ngModel)]=\"row_data[configs.parent_id_field]\">\n        <option *ngFor=\"let parent of parents\" [value]=\"parent.id\">{{parent.value}}</option>\n      </select>\n    </td>    \n\n    <!-- Add column to fix UI issue when add row is enabled but don't show when edit is enabled for the row -->\n    <td *ngIf=\"internal_configs.show_add_row && !(internal_configs.show_parent_col && configs.show_parent_on_edit)\"></td>\n  </ng-container>\n</tr>\n<tr *ngIf=\"configs.show_summary_row\">\n  <td *ngIf=\"configs.multi_select\"></td>\n  <td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n  <td *ngFor=\"let column of configs.columns\">\n    <div [innerHTML]=\"column.summary_renderer && column.summary_renderer(display_data)\"></div>\n  </td>\n</tr>\n</ng-container>\n\n</ng-container>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}\n"] }]
        }], ctorParameters: function () { return [{ type: AngularTreeGridService }]; }, propDecorators: { store: [{
                type: Input
            }], configs: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], edit_tracker: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }], columns: [{
                type: Input
            }], cellclick: [{
                type: Input
            }], expand: [{
                type: Input
            }], collapse: [{
                type: Input
            }], rowdelete: [{
                type: Input
            }], rowsave: [{
                type: Input
            }], rowadd: [{
                type: Input
            }], rowselect: [{
                type: Input
            }], rowdeselect: [{
                type: Input
            }] } });

class AngularTreeGridComponent {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
        this.processed_data = [];
        this.expand_tracker = {};
        this.columns = [];
        this.edit_tracker = {}; // Track Edit options.
        this.internal_configs = {
            show_add_row: false,
            show_parent_col: false,
            all_selected: false
        };
        this.store = new Store(this.angularTreeGridService);
        this.default_configs = {
            css: {
                expand_icon: '',
                collapse_icon: '',
                add_icon: '',
                edit_icon: '',
                delete_icon: '',
                save_icon: '',
                cancel_icon: '',
                row_selection_class: 'selected',
                header_class: '',
                row_filter_class: '',
                table_class: ''
            },
            actions: {
                edit: false,
                add: false,
                delete: false,
                resolve_edit: false,
                resolve_add: false,
                resolve_delete: false,
                edit_parent: false
            },
            data_loading_text: 'Loading...',
            filter: false,
            multi_select: false,
            show_parent_on_edit: true,
            show_summary_row: false,
            subgrid: false,
            load_children_on_expand: false,
            action_column_width: '60px',
            row_class_function: () => '',
            row_edit_function: () => true,
            row_delete_function: () => true,
            subgrid_config: {
                show_summary_row: false,
                data_loading_text: 'Loading...'
            }
        };
        this.default_column_config = {
            sorted: 0,
            sort_type: null,
            editable: false,
            hidden: false,
            filter: true,
            case_sensitive_filter: false
        };
        this.cellclick = new EventEmitter();
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.rowselect = new EventEmitter();
        this.rowdeselect = new EventEmitter();
        this.rowselectall = new EventEmitter();
        this.rowdeselectall = new EventEmitter();
        this.rowadd = new EventEmitter();
        this.rowsave = new EventEmitter();
        this.rowdelete = new EventEmitter();
    }
    ngOnInit() {
        if (!this.validateConfigs()) {
            return;
        }
        this.setDefaultConfigs();
        this.setColumnNames();
    }
    ngOnChanges() {
        if (!this.validateConfigs()) {
            return;
        }
        this.setDefaultConfigs();
        this.setColumnNames();
        this.store.processData(this.data, this.expand_tracker, this.configs, this.edit_tracker, this.internal_configs);
    }
    validateConfigs() {
        if (!this.data) {
            window.console.warn('data can\'t be empty!');
            return;
        }
        if (!this.configs) {
            window.console.warn('configs can\'t be empty!');
            return;
        }
        const element = this.data[0];
        let isValidated = true;
        if (!this.configs.id_field) {
            isValidated = false;
            window.console.error('id field is mandatory!');
        }
        if (!this.configs.parent_id_field && !this.configs.subgrid) {
            isValidated = false;
            window.console.error('parent_id field is mandatory!');
        }
        if (element && !element.hasOwnProperty(this.configs.id_field)) {
            isValidated = false;
            console.error('id_field doesn\'t exist!');
        }
        if (element && !element.hasOwnProperty(this.configs.parent_id_field)
            && !this.configs.subgrid
            && !this.configs.load_children_on_expand) {
            isValidated = false;
            console.error('parent_id_field doesn\'t exist!');
        }
        if (element && !element.hasOwnProperty(this.configs.parent_display_field)) {
            isValidated = false;
            console.error('parent_display_field doesn\'t exist! Basically this field will be expanded.');
        }
        if (this.configs.subgrid && !this.configs.subgrid_config) {
            isValidated = false;
            console.error('subgrid_config doesn\'t exist!');
        }
        if (this.configs.subgrid && this.configs.subgrid_config && !this.configs.subgrid_config.id_field) {
            isValidated = false;
            console.error('id_field of subgrid doesn\'t exist!');
        }
        if (this.configs.subgrid && this.configs.subgrid_config && !this.configs.subgrid_config.columns) {
            isValidated = false;
            console.error('columns of subgrid doesn\'t exist!');
        }
        return isValidated;
    }
    setDefaultConfigs() {
        this.processed_data = [];
        this.configs = Object.assign({}, this.default_configs, this.configs);
        // Deep clone.
        this.configs.actions = Object.assign({}, this.default_configs.actions, this.configs.actions);
        this.configs.css = Object.assign({}, this.default_configs.css, this.configs.css);
        this.configs.subgrid_config = Object.assign({}, this.default_configs.subgrid_config, this.configs.subgrid_config);
        if (this.configs.subgrid) {
            this.configs.actions.add = false;
        }
    }
    setColumnNames() {
        this.columns = this.configs.columns ? this.configs.columns : [];
        // If columns doesn't exist in user's object.
        if (!this.configs.columns) {
            const column_keys = Object.keys(this.data[0]);
            // Insert Header and default configuration.
            column_keys.forEach(key => {
                this.columns.push(Object.assign({ 'header': key, 'name': key }, this.default_column_config));
            });
        }
        else {
            // Insert Header and default configuration.
            for (let i = 0; i < this.columns.length; i++) {
                this.columns[i] = Object.assign({}, this.default_column_config, this.columns[i]);
            }
        }
    }
    collapseAll() {
        this.angularTreeGridService.collapseAll(this.expand_tracker);
    }
    expandAll() {
        this.angularTreeGridService.expandAll(this.expand_tracker);
    }
    selectAll() {
        this.angularTreeGridService.selectAll(this.store.getDisplayData());
        this.internal_configs.all_selected = true;
    }
    deSelectAll() {
        this.angularTreeGridService.deSelectAll(this.store.getDisplayData());
        this.internal_configs.all_selected = false;
    }
    expandRow(row_id, suppress_event) {
        this.angularTreeGridService.expandRow(row_id, this.expand_tracker, this.expand, suppress_event, this.configs, this.store.getDisplayData(), this.store);
    }
    collapseRow(row_id, suppress_event) {
        this.angularTreeGridService.collapseRow(row_id, this.expand_tracker, this.collapse, suppress_event, this.configs, this.store.getDisplayData());
    }
    disableRowSelection(row_id) {
        this.angularTreeGridService.disableRowSelection(this.store.getDisplayData(), this.configs, row_id);
    }
    enableRowSelection(row_id) {
        this.angularTreeGridService.enableRowSelection(this.store.getDisplayData(), this.configs, row_id);
    }
    disableRowExpand(row_id) {
        this.angularTreeGridService.disableRowExpand(this.store.getDisplayData(), this.configs, row_id);
    }
    enableRowExpand(row_id) {
        this.angularTreeGridService.enableRowExpand(this.store.getDisplayData(), this.configs, row_id);
    }
}
AngularTreeGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridComponent, deps: [{ token: AngularTreeGridService }], target: i0.ɵɵFactoryTarget.Component });
AngularTreeGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: AngularTreeGridComponent, selector: "db-angular-tree-grid", inputs: { data: "data", configs: "configs" }, outputs: { cellclick: "cellclick", expand: "expand", collapse: "collapse", rowselect: "rowselect", rowdeselect: "rowdeselect", rowselectall: "rowselectall", rowdeselectall: "rowdeselectall", rowadd: "rowadd", rowsave: "rowsave", rowdelete: "rowdelete" }, usesOnChanges: true, ngImport: i0, template: "<table [attr.class]=\"'db-tree-view ' + configs.css.table_class\" >\n    <thead \n        db-tree-head\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [edit_tracker]=\"edit_tracker\"\n        [rowselectall]=\"rowselectall\"\n        [rowdeselectall]=\"rowdeselectall\"\n        [columns]=\"columns\"\n        [configs]=\"configs\">\n    </thead>\n\n    <tbody \n        db-tree-body\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_tracker]=\"edit_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [columns]=\"columns\"\n        [configs]=\"configs\"\n        [cellclick]=\"cellclick\"\n        [expand]=\"expand\"\n        [collapse]=\"collapse\"\n        [rowdelete]=\"rowdelete\"\n        [rowsave]=\"rowsave\"\n        [rowadd]=\"rowadd\"\n        [rowselect]=\"rowselect\"\n        [rowdeselect]=\"rowdeselect\"\n    >        \n    </tbody>\n</table>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}\n"], components: [{ type: TreeHeadComponent, selector: "[db-tree-head]", inputs: ["store", "configs", "expand_tracker", "edit_tracker", "internal_configs", "columns", "rowselectall", "rowdeselectall"] }, { type: TreeBodyComponent, selector: "[db-tree-body]", inputs: ["store", "configs", "expand_tracker", "edit_tracker", "internal_configs", "columns", "cellclick", "expand", "collapse", "rowdelete", "rowsave", "rowadd", "rowselect", "rowdeselect"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'db-angular-tree-grid', template: "<table [attr.class]=\"'db-tree-view ' + configs.css.table_class\" >\n    <thead \n        db-tree-head\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [edit_tracker]=\"edit_tracker\"\n        [rowselectall]=\"rowselectall\"\n        [rowdeselectall]=\"rowdeselectall\"\n        [columns]=\"columns\"\n        [configs]=\"configs\">\n    </thead>\n\n    <tbody \n        db-tree-body\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_tracker]=\"edit_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [columns]=\"columns\"\n        [configs]=\"configs\"\n        [cellclick]=\"cellclick\"\n        [expand]=\"expand\"\n        [collapse]=\"collapse\"\n        [rowdelete]=\"rowdelete\"\n        [rowsave]=\"rowsave\"\n        [rowadd]=\"rowadd\"\n        [rowselect]=\"rowselect\"\n        [rowdeselect]=\"rowdeselect\"\n    >        \n    </tbody>\n</table>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}\n"] }]
        }], ctorParameters: function () { return [{ type: AngularTreeGridService }]; }, propDecorators: { data: [{
                type: Input
            }], configs: [{
                type: Input
            }], cellclick: [{
                type: Output
            }], expand: [{
                type: Output
            }], collapse: [{
                type: Output
            }], rowselect: [{
                type: Output
            }], rowdeselect: [{
                type: Output
            }], rowselectall: [{
                type: Output
            }], rowdeselectall: [{
                type: Output
            }], rowadd: [{
                type: Output
            }], rowsave: [{
                type: Output
            }], rowdelete: [{
                type: Output
            }] } });

class TreeCellModule {
}
TreeCellModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TreeCellModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellModule, declarations: [TreeCellComponent,
        TreeCellViewComponent,
        CustomCellViewComponent,
        TreeCellActionsComponent,
        CustomCellEditorComponent,
        TreeCellEditorComponent,
        SafeHtmlPipe], imports: [CommonModule,
        FormsModule], exports: [TreeCellComponent,
        CustomCellViewComponent,
        CustomCellEditorComponent,
        TreeCellEditorComponent,
        TreeCellActionsComponent,
        SafeHtmlPipe] });
TreeCellModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellModule, imports: [[
            CommonModule,
            FormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeCellModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        TreeCellComponent,
                        TreeCellViewComponent,
                        CustomCellViewComponent,
                        TreeCellActionsComponent,
                        CustomCellEditorComponent,
                        TreeCellEditorComponent,
                        SafeHtmlPipe
                    ],
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    exports: [
                        TreeCellComponent,
                        CustomCellViewComponent,
                        CustomCellEditorComponent,
                        TreeCellEditorComponent,
                        TreeCellActionsComponent,
                        SafeHtmlPipe
                    ]
                }]
        }] });

class SubgridModule {
}
SubgridModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SubgridModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridModule, declarations: [SubgridComponent, SubgridHeadComponent, SubgridBodyComponent], imports: [CommonModule,
        TreeCellModule], exports: [SubgridComponent] });
SubgridModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridModule, imports: [[
            CommonModule,
            TreeCellModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: SubgridModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SubgridComponent, SubgridHeadComponent, SubgridBodyComponent],
                    imports: [
                        CommonModule,
                        TreeCellModule
                    ],
                    exports: [SubgridComponent]
                }]
        }] });

class TreeBodyModule {
}
TreeBodyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TreeBodyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyModule, declarations: [TreeBodyComponent, AddRowComponent, FilterRowComponent], imports: [CommonModule,
        TreeCellModule,
        FormsModule,
        SubgridModule], exports: [TreeBodyComponent] });
TreeBodyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyModule, imports: [[
            CommonModule,
            TreeCellModule,
            FormsModule,
            SubgridModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TreeBodyComponent, AddRowComponent, FilterRowComponent],
                    imports: [
                        CommonModule,
                        TreeCellModule,
                        FormsModule,
                        SubgridModule
                    ],
                    exports: [TreeBodyComponent]
                }]
        }] });

class TreeHeadModule {
}
TreeHeadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeHeadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TreeHeadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeHeadModule, declarations: [TreeHeadComponent], imports: [CommonModule], exports: [TreeHeadComponent] });
TreeHeadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeHeadModule, imports: [[
            CommonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeHeadModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TreeHeadComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [TreeHeadComponent]
                }]
        }] });

class AngularTreeGridModule {
}
AngularTreeGridModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AngularTreeGridModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridModule, declarations: [AngularTreeGridComponent], imports: [CommonModule,
        TreeBodyModule,
        TreeHeadModule], exports: [AngularTreeGridComponent] });
AngularTreeGridModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridModule, imports: [[
            CommonModule,
            TreeBodyModule,
            TreeHeadModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AngularTreeGridComponent],
                    imports: [
                        CommonModule,
                        TreeBodyModule,
                        TreeHeadModule
                    ],
                    exports: [AngularTreeGridComponent]
                }]
        }] });

/*
 * Public API Surface of angular-tree-grid
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularTreeGridComponent, AngularTreeGridModule, AngularTreeGridService, DefaultEditor };
//# sourceMappingURL=angular-tree-grid.mjs.map
