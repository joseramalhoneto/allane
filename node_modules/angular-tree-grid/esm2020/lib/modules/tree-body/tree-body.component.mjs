import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../angular-tree-grid.service";
import * as i2 from "./components/filter-row/filter-row.component";
import * as i3 from "./components/add-row/add-row.component";
import * as i4 from "../subgrid/subgrid.component";
import * as i5 from "../tree-cell/components/tree-cell-actions/tree-cell-actions.component";
import * as i6 from "../tree-cell/tree-cell.component";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
export class TreeBodyComponent {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
        this.parents = [];
    }
    ngOnInit() {
        this.display_data = this.store.getDisplayData();
        this.angularTreeGridService.display_data_observable$.subscribe((store) => {
            this.display_data = this.store.getDisplayData();
            this.setParents();
        });
        this.setParents();
    }
    setParents() {
        this.parents = this.store.raw_data.map(element => {
            return {
                'id': element[this.configs.id_field],
                'value': element[this.configs.parent_display_field]
            };
        });
    }
    refreshData(element) {
        // If edit parent is not true then don't refresh.
        if (!this.configs.actions.edit_parent) {
            return;
        }
        element[this.configs.parent_id_field] = parseInt(element[this.configs.parent_id_field], 10);
        this.expand_tracker = {};
        this.edit_tracker = {};
        this.store.processData(this.store.getRawData(), this.expand_tracker, this.configs, this.edit_tracker, this.internal_configs);
    }
    onRowExpand(event) {
        const row_data = event.data;
        if (!this.configs.load_children_on_expand) {
            this.expand_tracker[row_data.pathx] = true;
            this.expand.emit(event);
        }
        else {
            this.angularTreeGridService.emitExpandRowEvent(this.expand_tracker, this.expand, this.store, row_data, this.configs);
        }
    }
    onRowCollapse(event) {
        const row_data = event.data;
        this.expand_tracker[row_data.pathx] = false;
        // Collapse all of its children.
        const keys = Object.keys(this.expand_tracker);
        keys.forEach(key => {
            if (key.indexOf(row_data.pathx) !== -1) {
                this.expand_tracker[key] = 0;
            }
        });
        this.collapse.emit(event);
    }
    saveRecord($event) {
        const element = $event.data;
        if (this.configs.actions.resolve_edit) {
            const promise = new Promise((resolve, reject) => {
                this.rowsave.emit({
                    data: element,
                    resolve: resolve
                });
            });
            promise.then(() => {
                this.checkAndRefreshData(element);
            }).catch((err) => { });
        }
        else {
            this.checkAndRefreshData(element);
            this.rowsave.emit(element);
        }
    }
    checkAndRefreshData(element) {
        this.edit_tracker[element[this.configs.id_field]] = false;
        this.internal_configs.show_parent_col = false;
        // Only refresh if Parent has been changed.
        if (this.internal_configs.current_edited_row[this.configs.parent_id_field]
            !== element[this.configs.parent_id_field]) {
            this.refreshData(element);
        }
    }
    addRow(element) {
        if (this.configs.actions.resolve_add) {
            const promise = new Promise((resolve, reject) => {
                this.rowadd.emit({
                    data: element,
                    resolve: resolve
                });
            });
            promise.then(() => {
                this.internal_configs.show_add_row = false;
                this.refreshData(element);
            }).catch((err) => { });
        }
        else {
            this.refreshData(element);
            this.internal_configs.show_add_row = false;
            this.rowadd.emit(element);
        }
    }
    cancelEdit(row_data) {
        const index = row_data[this.configs.id_field];
        // Cancel all changes ie copy from back up.
        Object.assign(row_data, this.internal_configs.current_edited_row);
        this.edit_tracker[index] = false;
        this.internal_configs.show_parent_col = false;
    }
    selectRow(row_data, event) {
        // Don't run if Multi select is enabled.
        if (this.configs.multi_select) {
            return;
        }
        this.store.getDisplayData().forEach(data => {
            data.row_selected = false;
        });
        row_data.row_selected = true;
        this.rowselect.emit({ data: row_data, event: event });
    }
    selectRowOnCheck(row_data, event) {
        if (event.target.checked) {
            row_data.row_selected = true;
            this.rowselect.emit({ data: row_data, event: event });
        }
        else {
            row_data.row_selected = false;
            this.rowdeselect.emit({ data: row_data, event: event });
        }
        this.setSelectAllConfig();
    }
    /**
     * Set Select All config on Select change.
     *
     */
    setSelectAllConfig() {
        let select_all = true;
        this.store.getDisplayData().forEach(data => {
            if (!data.row_selected) {
                select_all = false;
            }
        });
        this.internal_configs.all_selected = select_all;
    }
}
TreeBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyComponent, deps: [{ token: i1.AngularTreeGridService }], target: i0.ɵɵFactoryTarget.Component });
TreeBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: TreeBodyComponent, selector: "[db-tree-body]", inputs: { store: "store", configs: "configs", expand_tracker: "expand_tracker", edit_tracker: "edit_tracker", internal_configs: "internal_configs", columns: "columns", cellclick: "cellclick", expand: "expand", collapse: "collapse", rowdelete: "rowdelete", rowsave: "rowsave", rowadd: "rowadd", rowselect: "rowselect", rowdeselect: "rowdeselect" }, ngImport: i0, template: "<ng-container *ngIf=\"configs\">\n<tr *ngIf=\"store.raw_data.length==0\">\n  <td [innerHTML]=\"configs.data_loading_text\" [attr.colspan]=\"columns.length + 1\" style=\"text-align: center\"></td>\n</tr>\n<tr db-filter-row \n  [columns]=\"columns\" \n  [configs]=\"configs\"\n  [store]=\"store\"\n  [internal_configs]=\"internal_configs\" \n  *ngIf=\"configs.filter\"\n  [expand_tracker]=\"expand_tracker\"\n  [ngClass]=\"configs.css.row_filter_class\">\n</tr>\n<tr db-add-row \n  [columns]=\"columns\" \n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [store]=\"store\"\n  (rowadd)=\"addRow($event)\"\n  *ngIf=\"internal_configs.show_add_row\"\n  [ngClass]=\"configs.row_class_function()\">\n</tr>\n<ng-container *ngIf=\"configs.subgrid\">\n  <tr db-subgrid\n  *ngFor=\"let row_data of display_data\"\n  class=\"subgrid-row\"\n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [expand_tracker]=\"expand_tracker\" \n  [edit_tracker]=\"edit_tracker\" \n  [store]=\"store\"\n  [row_data]=\"row_data\"\n  [cellclick]=\"cellclick\"\n  [rowselect]=\"rowselect\"\n  [rowdeselect]=\"rowdeselect\"\n  [expand]=\"expand\"\n  [rowsave]=\"rowsave\"\n  [rowdelete]=\"rowdelete\"\n  >\n\n  </tr>\n</ng-container>\n<ng-container *ngIf=\"!configs.subgrid\">\n  <tr \n  *ngFor=\"let row_data of display_data\"\n  [attr.class]=\"configs.row_class_function(row_data) + ' ' + (row_data.row_selected ? configs.css.row_selection_class : '')\"\n  (click)=\"selectRow(row_data, $event)\" \n  >  \n  <ng-container *ngIf=\"expand_tracker[row_data.parent_pathx]\">\n    <td *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input type=\"checkbox\" [checked]=\"row_data.row_selected\" (click)=\"selectRowOnCheck(row_data, $event)\" \n        [attr.disabled]=\"row_data.selection_disabled\">\n    </td>\n    <td db-tree-cell-actions \n      *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"\n      [row_data]=\"row_data\"\n      [configs]=\"configs\"\n      [store]=\"store\"\n      [edit_tracker]=\"edit_tracker\"\n      [internal_configs]=\"internal_configs\"\n      [rowdelete]=\"rowdelete\"\n      (canceledit)=\"cancelEdit($event)\" \n      (editcomplete)=\"saveRecord($event)\">\n    </td>\n    <td *ngFor=\"let column of columns; index as i\" \n    class=\"{{column.css_class}}\"\n    [ngClass]=\"{'column-hide': column.hidden, 'expand-column': i == 0}\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"i\"\n        [row_data]=\"row_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_on]=\"edit_tracker[row_data[configs.id_field]]\"\n        [cellclick]=\"cellclick\"\n        (rowexpand)=\"onRowExpand($event)\"\n        (rowcollapse)=\"onRowCollapse($event)\"\n        (editcomplete)=\"saveRecord($event)\"\n      >\n      </db-tree-cell>\n    </td>\n    <td *ngIf=\"configs.show_parent_on_edit && internal_configs.show_parent_col\">\n      <select *ngIf=\"edit_tracker[row_data[configs.id_field]]\" \n        [(ngModel)]=\"row_data[configs.parent_id_field]\">\n        <option *ngFor=\"let parent of parents\" [value]=\"parent.id\">{{parent.value}}</option>\n      </select>\n    </td>    \n\n    <!-- Add column to fix UI issue when add row is enabled but don't show when edit is enabled for the row -->\n    <td *ngIf=\"internal_configs.show_add_row && !(internal_configs.show_parent_col && configs.show_parent_on_edit)\"></td>\n  </ng-container>\n</tr>\n<tr *ngIf=\"configs.show_summary_row\">\n  <td *ngIf=\"configs.multi_select\"></td>\n  <td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n  <td *ngFor=\"let column of configs.columns\">\n    <div [innerHTML]=\"column.summary_renderer && column.summary_renderer(display_data)\"></div>\n  </td>\n</tr>\n</ng-container>\n\n</ng-container>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}\n"], components: [{ type: i2.FilterRowComponent, selector: "[db-filter-row]", inputs: ["store", "columns", "expand_tracker", "configs", "internal_configs"] }, { type: i3.AddRowComponent, selector: "[db-add-row]", inputs: ["store", "columns", "configs", "internal_configs"], outputs: ["rowadd", "canceledit"] }, { type: i4.SubgridComponent, selector: "[db-subgrid]", inputs: ["store", "configs", "expand_tracker", "edit_tracker", "internal_configs", "row_data", "cellclick", "expand", "rowselect", "rowdeselect", "rowsave", "rowdelete"] }, { type: i5.TreeCellActionsComponent, selector: "[db-tree-cell-actions]", inputs: ["store", "edit_tracker", "internal_configs", "configs", "rowdelete", "row_data"], outputs: ["editcomplete", "canceledit"] }, { type: i6.TreeCellComponent, selector: "db-tree-cell", inputs: ["configs", "index", "row_data", "column", "expand_tracker", "cellclick", "edit_on"], outputs: ["rowexpand", "rowcollapse", "canceledit", "editcomplete"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i8.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: TreeBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[db-tree-body]', template: "<ng-container *ngIf=\"configs\">\n<tr *ngIf=\"store.raw_data.length==0\">\n  <td [innerHTML]=\"configs.data_loading_text\" [attr.colspan]=\"columns.length + 1\" style=\"text-align: center\"></td>\n</tr>\n<tr db-filter-row \n  [columns]=\"columns\" \n  [configs]=\"configs\"\n  [store]=\"store\"\n  [internal_configs]=\"internal_configs\" \n  *ngIf=\"configs.filter\"\n  [expand_tracker]=\"expand_tracker\"\n  [ngClass]=\"configs.css.row_filter_class\">\n</tr>\n<tr db-add-row \n  [columns]=\"columns\" \n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [store]=\"store\"\n  (rowadd)=\"addRow($event)\"\n  *ngIf=\"internal_configs.show_add_row\"\n  [ngClass]=\"configs.row_class_function()\">\n</tr>\n<ng-container *ngIf=\"configs.subgrid\">\n  <tr db-subgrid\n  *ngFor=\"let row_data of display_data\"\n  class=\"subgrid-row\"\n  [configs]=\"configs\" \n  [internal_configs]=\"internal_configs\" \n  [expand_tracker]=\"expand_tracker\" \n  [edit_tracker]=\"edit_tracker\" \n  [store]=\"store\"\n  [row_data]=\"row_data\"\n  [cellclick]=\"cellclick\"\n  [rowselect]=\"rowselect\"\n  [rowdeselect]=\"rowdeselect\"\n  [expand]=\"expand\"\n  [rowsave]=\"rowsave\"\n  [rowdelete]=\"rowdelete\"\n  >\n\n  </tr>\n</ng-container>\n<ng-container *ngIf=\"!configs.subgrid\">\n  <tr \n  *ngFor=\"let row_data of display_data\"\n  [attr.class]=\"configs.row_class_function(row_data) + ' ' + (row_data.row_selected ? configs.css.row_selection_class : '')\"\n  (click)=\"selectRow(row_data, $event)\" \n  >  \n  <ng-container *ngIf=\"expand_tracker[row_data.parent_pathx]\">\n    <td *ngIf=\"configs.multi_select\" class=\"checkbox_column\">\n      <input type=\"checkbox\" [checked]=\"row_data.row_selected\" (click)=\"selectRowOnCheck(row_data, $event)\" \n        [attr.disabled]=\"row_data.selection_disabled\">\n    </td>\n    <td db-tree-cell-actions \n      *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"\n      [row_data]=\"row_data\"\n      [configs]=\"configs\"\n      [store]=\"store\"\n      [edit_tracker]=\"edit_tracker\"\n      [internal_configs]=\"internal_configs\"\n      [rowdelete]=\"rowdelete\"\n      (canceledit)=\"cancelEdit($event)\" \n      (editcomplete)=\"saveRecord($event)\">\n    </td>\n    <td *ngFor=\"let column of columns; index as i\" \n    class=\"{{column.css_class}}\"\n    [ngClass]=\"{'column-hide': column.hidden, 'expand-column': i == 0}\">\n      <db-tree-cell\n        [configs]=\"configs\"\n        [column]=\"column\"\n        [index]=\"i\"\n        [row_data]=\"row_data\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_on]=\"edit_tracker[row_data[configs.id_field]]\"\n        [cellclick]=\"cellclick\"\n        (rowexpand)=\"onRowExpand($event)\"\n        (rowcollapse)=\"onRowCollapse($event)\"\n        (editcomplete)=\"saveRecord($event)\"\n      >\n      </db-tree-cell>\n    </td>\n    <td *ngIf=\"configs.show_parent_on_edit && internal_configs.show_parent_col\">\n      <select *ngIf=\"edit_tracker[row_data[configs.id_field]]\" \n        [(ngModel)]=\"row_data[configs.parent_id_field]\">\n        <option *ngFor=\"let parent of parents\" [value]=\"parent.id\">{{parent.value}}</option>\n      </select>\n    </td>    \n\n    <!-- Add column to fix UI issue when add row is enabled but don't show when edit is enabled for the row -->\n    <td *ngIf=\"internal_configs.show_add_row && !(internal_configs.show_parent_col && configs.show_parent_on_edit)\"></td>\n  </ng-container>\n</tr>\n<tr *ngIf=\"configs.show_summary_row\">\n  <td *ngIf=\"configs.multi_select\"></td>\n  <td *ngIf=\"(configs.actions.edit || configs.actions.delete || configs.actions.add)\"></td>\n  <td *ngFor=\"let column of configs.columns\">\n    <div [innerHTML]=\"column.summary_renderer && column.summary_renderer(display_data)\"></div>\n  </td>\n</tr>\n</ng-container>\n\n</ng-container>\n", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}tr{border-bottom:1px solid #cdd5dc}tr.selected{background-color:#e2e7eb}tr span.parent_container{padding-left:45px}tr.child{background:#fff}tr.child td:nth-child(2){padding:.875rem 1.25rem .875rem 2.5rem!important}tr.parent{background:#fafbff}tr.subgrid-row{background:#fcfcfc}tr td{vertical-align:middle;position:relative;padding:.5rem;box-sizing:border-box}tr td.checkbox_column{text-align:center}tr td.expand-column{padding:.3rem}tr td.column-hide{display:none}tr td.clear-left-border{border-left:0!important}tr td.clear-right-border{border-right:0!important}tr td select{padding:5px;border:1px solid #d1cece}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AngularTreeGridService }]; }, propDecorators: { store: [{
                type: Input
            }], configs: [{
                type: Input
            }], expand_tracker: [{
                type: Input
            }], edit_tracker: [{
                type: Input
            }], internal_configs: [{
                type: Input
            }], columns: [{
                type: Input
            }], cellclick: [{
                type: Input
            }], expand: [{
                type: Input
            }], collapse: [{
                type: Input
            }], rowdelete: [{
                type: Input
            }], rowsave: [{
                type: Input
            }], rowadd: [{
                type: Input
            }], rowselect: [{
                type: Input
            }], rowdeselect: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,