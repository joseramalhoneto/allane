import { Component, Input, ViewChild, ViewContainerRef, } from '@angular/core';
import * as i0 from "@angular/core";
export class CustomCellViewComponent {
    constructor(resolver) {
        this.resolver = resolver;
    }
    ngOnInit() {
        if (this.column.component && !this.custom_component) {
            this.createCustomComponent();
            this.callOnComponentInit();
        }
    }
    ngOnDestroy() {
        if (this.custom_component) {
            this.custom_component.destroy();
        }
    }
    createCustomComponent() {
        const componentFactory = this.resolver.resolveComponentFactory(this.column.component);
        this.custom_component = this.custom_view.createComponent(componentFactory);
    }
    callOnComponentInit() {
        this.column.on_component_init && this.column.on_component_init(this.custom_component.instance);
        this.custom_component.instance.cell_value = this.row_data[this.column.name];
        this.custom_component.instance.row_data = this.row_data;
        this.custom_component.instance.column = this.column;
    }
}
CustomCellViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CustomCellViewComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
CustomCellViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: CustomCellViewComponent, selector: "db-custom-cell-component", inputs: { column: "column", row_data: "row_data" }, viewQueries: [{ propertyName: "custom_view", first: true, predicate: ["customView"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `
      <ng-template #customView></ng-template>
    `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CustomCellViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'db-custom-cell-component',
                    template: `
      <ng-template #customView></ng-template>
    `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { column: [{
                type: Input
            }], row_data: [{
                type: Input
            }], custom_view: [{
                type: ViewChild,
                args: ['customView', { read: ViewContainerRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXRyZWUtY2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXRyZWUtZ3JpZC9zcmMvbGliL21vZHVsZXMvdHJlZS1jZWxsL2NvbXBvbmVudHMvdHJlZS1jZWxsLXZpZXcvY3VzdG9tL2N1c3RvbS10cmVlLWNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsS0FBSyxFQUVMLFNBQVMsRUFDVCxnQkFBZ0IsR0FHbkIsTUFBTSxlQUFlLENBQUM7O0FBU3ZCLE1BQU0sT0FBTyx1QkFBdUI7SUFNaEMsWUFBb0IsUUFBa0M7UUFBbEMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7SUFDdEQsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ25ELElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRVMscUJBQXFCO1FBQzdCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN4RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RELENBQUM7O29IQWpDUSx1QkFBdUI7d0dBQXZCLHVCQUF1QiwwTUFJQyxnQkFBZ0IsMkNBUnZDOztLQUVUOzJGQUVRLHVCQUF1QjtrQkFObkMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxRQUFRLEVBQUU7O0tBRVQ7aUJBQ0o7K0dBR1ksTUFBTTtzQkFBZCxLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQzZELFdBQVc7c0JBQTdFLFNBQVM7dUJBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgVmlld0NoaWxkLFxuICAgIFZpZXdDb250YWluZXJSZWYsXG4gICAgT25Jbml0LFxuICAgIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9tb2RlbHMvQ29sdW1uLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkYi1jdXN0b20tY2VsbC1jb21wb25lbnQnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICA8bmctdGVtcGxhdGUgI2N1c3RvbVZpZXc+PC9uZy10ZW1wbGF0ZT5cbiAgICBgLFxufSlcbmV4cG9ydCBjbGFzcyBDdXN0b21DZWxsVmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBjdXN0b21fY29tcG9uZW50OiBhbnk7XG4gICAgQElucHV0KCkgY29sdW1uOiBDb2x1bW47XG4gICAgQElucHV0KCkgcm93X2RhdGE7XG4gICAgQFZpZXdDaGlsZCgnY3VzdG9tVmlldycsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiB0cnVlIH0pIGN1c3RvbV92aWV3OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbHVtbi5jb21wb25lbnQgJiYgIXRoaXMuY3VzdG9tX2NvbXBvbmVudCkge1xuICAgICAgICB0aGlzLmNyZWF0ZUN1c3RvbUNvbXBvbmVudCgpO1xuICAgICAgICB0aGlzLmNhbGxPbkNvbXBvbmVudEluaXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLmN1c3RvbV9jb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jdXN0b21fY29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ3VzdG9tQ29tcG9uZW50KCkge1xuICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy5jb2x1bW4uY29tcG9uZW50KTtcbiAgICAgIHRoaXMuY3VzdG9tX2NvbXBvbmVudCA9IHRoaXMuY3VzdG9tX3ZpZXcuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjYWxsT25Db21wb25lbnRJbml0KCkge1xuICAgICAgdGhpcy5jb2x1bW4ub25fY29tcG9uZW50X2luaXQgJiYgdGhpcy5jb2x1bW4ub25fY29tcG9uZW50X2luaXQodGhpcy5jdXN0b21fY29tcG9uZW50Lmluc3RhbmNlKTtcblxuICAgICAgdGhpcy5jdXN0b21fY29tcG9uZW50Lmluc3RhbmNlLmNlbGxfdmFsdWUgPSB0aGlzLnJvd19kYXRhW3RoaXMuY29sdW1uLm5hbWVdO1xuICAgICAgdGhpcy5jdXN0b21fY29tcG9uZW50Lmluc3RhbmNlLnJvd19kYXRhID0gdGhpcy5yb3dfZGF0YTtcbiAgICAgIHRoaXMuY3VzdG9tX2NvbXBvbmVudC5pbnN0YW5jZS5jb2x1bW4gPSB0aGlzLmNvbHVtbjtcbiAgICB9XG59XG4iXX0=