import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Store } from './store/store';
import * as i0 from "@angular/core";
import * as i1 from "./angular-tree-grid.service";
import * as i2 from "./modules/tree-head/tree-head.component";
import * as i3 from "./modules/tree-body/tree-body.component";
export class AngularTreeGridComponent {
    constructor(angularTreeGridService) {
        this.angularTreeGridService = angularTreeGridService;
        this.processed_data = [];
        this.expand_tracker = {};
        this.columns = [];
        this.edit_tracker = {}; // Track Edit options.
        this.internal_configs = {
            show_add_row: false,
            show_parent_col: false,
            all_selected: false
        };
        this.store = new Store(this.angularTreeGridService);
        this.default_configs = {
            css: {
                expand_icon: '',
                collapse_icon: '',
                add_icon: '',
                edit_icon: '',
                delete_icon: '',
                save_icon: '',
                cancel_icon: '',
                row_selection_class: 'selected',
                header_class: '',
                row_filter_class: '',
                table_class: ''
            },
            actions: {
                edit: false,
                add: false,
                delete: false,
                resolve_edit: false,
                resolve_add: false,
                resolve_delete: false,
                edit_parent: false
            },
            data_loading_text: 'Loading...',
            filter: false,
            multi_select: false,
            show_parent_on_edit: true,
            show_summary_row: false,
            subgrid: false,
            load_children_on_expand: false,
            action_column_width: '60px',
            row_class_function: () => '',
            row_edit_function: () => true,
            row_delete_function: () => true,
            subgrid_config: {
                show_summary_row: false,
                data_loading_text: 'Loading...'
            }
        };
        this.default_column_config = {
            sorted: 0,
            sort_type: null,
            editable: false,
            hidden: false,
            filter: true,
            case_sensitive_filter: false
        };
        this.cellclick = new EventEmitter();
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.rowselect = new EventEmitter();
        this.rowdeselect = new EventEmitter();
        this.rowselectall = new EventEmitter();
        this.rowdeselectall = new EventEmitter();
        this.rowadd = new EventEmitter();
        this.rowsave = new EventEmitter();
        this.rowdelete = new EventEmitter();
    }
    ngOnInit() {
        if (!this.validateConfigs()) {
            return;
        }
        this.setDefaultConfigs();
        this.setColumnNames();
    }
    ngOnChanges() {
        if (!this.validateConfigs()) {
            return;
        }
        this.setDefaultConfigs();
        this.setColumnNames();
        this.store.processData(this.data, this.expand_tracker, this.configs, this.edit_tracker, this.internal_configs);
    }
    validateConfigs() {
        if (!this.data) {
            window.console.warn('data can\'t be empty!');
            return;
        }
        if (!this.configs) {
            window.console.warn('configs can\'t be empty!');
            return;
        }
        const element = this.data[0];
        let isValidated = true;
        if (!this.configs.id_field) {
            isValidated = false;
            window.console.error('id field is mandatory!');
        }
        if (!this.configs.parent_id_field && !this.configs.subgrid) {
            isValidated = false;
            window.console.error('parent_id field is mandatory!');
        }
        if (element && !element.hasOwnProperty(this.configs.id_field)) {
            isValidated = false;
            console.error('id_field doesn\'t exist!');
        }
        if (element && !element.hasOwnProperty(this.configs.parent_id_field)
            && !this.configs.subgrid
            && !this.configs.load_children_on_expand) {
            isValidated = false;
            console.error('parent_id_field doesn\'t exist!');
        }
        if (element && !element.hasOwnProperty(this.configs.parent_display_field)) {
            isValidated = false;
            console.error('parent_display_field doesn\'t exist! Basically this field will be expanded.');
        }
        if (this.configs.subgrid && !this.configs.subgrid_config) {
            isValidated = false;
            console.error('subgrid_config doesn\'t exist!');
        }
        if (this.configs.subgrid && this.configs.subgrid_config && !this.configs.subgrid_config.id_field) {
            isValidated = false;
            console.error('id_field of subgrid doesn\'t exist!');
        }
        if (this.configs.subgrid && this.configs.subgrid_config && !this.configs.subgrid_config.columns) {
            isValidated = false;
            console.error('columns of subgrid doesn\'t exist!');
        }
        return isValidated;
    }
    setDefaultConfigs() {
        this.processed_data = [];
        this.configs = Object.assign({}, this.default_configs, this.configs);
        // Deep clone.
        this.configs.actions = Object.assign({}, this.default_configs.actions, this.configs.actions);
        this.configs.css = Object.assign({}, this.default_configs.css, this.configs.css);
        this.configs.subgrid_config = Object.assign({}, this.default_configs.subgrid_config, this.configs.subgrid_config);
        if (this.configs.subgrid) {
            this.configs.actions.add = false;
        }
    }
    setColumnNames() {
        this.columns = this.configs.columns ? this.configs.columns : [];
        // If columns doesn't exist in user's object.
        if (!this.configs.columns) {
            const column_keys = Object.keys(this.data[0]);
            // Insert Header and default configuration.
            column_keys.forEach(key => {
                this.columns.push(Object.assign({ 'header': key, 'name': key }, this.default_column_config));
            });
        }
        else {
            // Insert Header and default configuration.
            for (let i = 0; i < this.columns.length; i++) {
                this.columns[i] = Object.assign({}, this.default_column_config, this.columns[i]);
            }
        }
    }
    collapseAll() {
        this.angularTreeGridService.collapseAll(this.expand_tracker);
    }
    expandAll() {
        this.angularTreeGridService.expandAll(this.expand_tracker);
    }
    selectAll() {
        this.angularTreeGridService.selectAll(this.store.getDisplayData());
        this.internal_configs.all_selected = true;
    }
    deSelectAll() {
        this.angularTreeGridService.deSelectAll(this.store.getDisplayData());
        this.internal_configs.all_selected = false;
    }
    expandRow(row_id, suppress_event) {
        this.angularTreeGridService.expandRow(row_id, this.expand_tracker, this.expand, suppress_event, this.configs, this.store.getDisplayData(), this.store);
    }
    collapseRow(row_id, suppress_event) {
        this.angularTreeGridService.collapseRow(row_id, this.expand_tracker, this.collapse, suppress_event, this.configs, this.store.getDisplayData());
    }
    disableRowSelection(row_id) {
        this.angularTreeGridService.disableRowSelection(this.store.getDisplayData(), this.configs, row_id);
    }
    enableRowSelection(row_id) {
        this.angularTreeGridService.enableRowSelection(this.store.getDisplayData(), this.configs, row_id);
    }
    disableRowExpand(row_id) {
        this.angularTreeGridService.disableRowExpand(this.store.getDisplayData(), this.configs, row_id);
    }
    enableRowExpand(row_id) {
        this.angularTreeGridService.enableRowExpand(this.store.getDisplayData(), this.configs, row_id);
    }
}
AngularTreeGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridComponent, deps: [{ token: i1.AngularTreeGridService }], target: i0.ɵɵFactoryTarget.Component });
AngularTreeGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: AngularTreeGridComponent, selector: "db-angular-tree-grid", inputs: { data: "data", configs: "configs" }, outputs: { cellclick: "cellclick", expand: "expand", collapse: "collapse", rowselect: "rowselect", rowdeselect: "rowdeselect", rowselectall: "rowselectall", rowdeselectall: "rowdeselectall", rowadd: "rowadd", rowsave: "rowsave", rowdelete: "rowdelete" }, usesOnChanges: true, ngImport: i0, template: "<table [attr.class]=\"'db-tree-view ' + configs.css.table_class\" >\n    <thead \n        db-tree-head\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [edit_tracker]=\"edit_tracker\"\n        [rowselectall]=\"rowselectall\"\n        [rowdeselectall]=\"rowdeselectall\"\n        [columns]=\"columns\"\n        [configs]=\"configs\">\n    </thead>\n\n    <tbody \n        db-tree-body\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_tracker]=\"edit_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [columns]=\"columns\"\n        [configs]=\"configs\"\n        [cellclick]=\"cellclick\"\n        [expand]=\"expand\"\n        [collapse]=\"collapse\"\n        [rowdelete]=\"rowdelete\"\n        [rowsave]=\"rowsave\"\n        [rowadd]=\"rowadd\"\n        [rowselect]=\"rowselect\"\n        [rowdeselect]=\"rowdeselect\"\n    >        \n    </tbody>\n</table>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}\n"], components: [{ type: i2.TreeHeadComponent, selector: "[db-tree-head]", inputs: ["store", "configs", "expand_tracker", "edit_tracker", "internal_configs", "columns", "rowselectall", "rowdeselectall"] }, { type: i3.TreeBodyComponent, selector: "[db-tree-body]", inputs: ["store", "configs", "expand_tracker", "edit_tracker", "internal_configs", "columns", "cellclick", "expand", "collapse", "rowdelete", "rowsave", "rowadd", "rowselect", "rowdeselect"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: AngularTreeGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'db-angular-tree-grid', template: "<table [attr.class]=\"'db-tree-view ' + configs.css.table_class\" >\n    <thead \n        db-tree-head\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [edit_tracker]=\"edit_tracker\"\n        [rowselectall]=\"rowselectall\"\n        [rowdeselectall]=\"rowdeselectall\"\n        [columns]=\"columns\"\n        [configs]=\"configs\">\n    </thead>\n\n    <tbody \n        db-tree-body\n        [store]=\"store\"\n        [expand_tracker]=\"expand_tracker\"\n        [edit_tracker]=\"edit_tracker\"\n        [internal_configs]=\"internal_configs\"\n        [columns]=\"columns\"\n        [configs]=\"configs\"\n        [cellclick]=\"cellclick\"\n        [expand]=\"expand\"\n        [collapse]=\"collapse\"\n        [rowdelete]=\"rowdelete\"\n        [rowsave]=\"rowsave\"\n        [rowadd]=\"rowadd\"\n        [rowselect]=\"rowselect\"\n        [rowdeselect]=\"rowdeselect\"\n    >        \n    </tbody>\n</table>", styles: [".db-tree-view{line-height:1.5em;border-collapse:collapse;border-spacing:0;display:table;max-width:100%;overflow:auto;word-break:normal;word-break:keep-all;color:#4b4b4b}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AngularTreeGridService }]; }, propDecorators: { data: [{
                type: Input
            }], configs: [{
                type: Input
            }], cellclick: [{
                type: Output
            }], expand: [{
                type: Output
            }], collapse: [{
                type: Output
            }], rowselect: [{
                type: Output
            }], rowdeselect: [{
                type: Output
            }], rowselectall: [{
                type: Output
            }], rowdeselectall: [{
                type: Output
            }], rowadd: [{
                type: Output
            }], rowsave: [{
                type: Output
            }], rowdelete: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,